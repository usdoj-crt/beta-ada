/*! For license information please see accordion-compiled.js.LICENSE.txt */
(function(){var __webpack_modules__={"./_assets/js/expand-accordions.js":function(){eval("// Options for the observer (which mutations to observe)\nconst config = {\n  attributes: true,\n  childList: true,\n  subtree: true\n}; // Grab the button that will actually toggle things:\n\nconst openAccordionsButton = document.querySelector('#crt-page--expandaccordions'); // Select the node that will be observed for mutations\n\nconst contentNode = document.querySelector('#crt-page--content'); // Grab all of the accordions and convert the Nodelist into an array:\n\nconst getAccordions = () => {\n  const regexp = /accordion-expandable\\-*/gm;\n  const accordions = Array.from(document.querySelectorAll('.expand div.usa-accordion__content')).filter(accordion => accordion.id.match(regexp));\n  return accordions;\n}; // Grab all of the accordion buttons except for the table of contents button and convert the Nodelist into an array:\n\n\nconst getAccordionButtons = () => Array.from(document.querySelectorAll('.expand button.usa-accordion__button.pa11y-skip')); // Grab all of the <details> elements and convert the Nodelist into an array:\n\n\nconst getDetails = () => Array.from(document.querySelectorAll('details.expand')); // Generate a list of all the controllable element ids so we can reference them using aria-controls in our button.\n\n\nconst getItemIds = () => {\n  let ids = [];\n  getAccordions().forEach(acc => ids.push(acc.id));\n  getDetails().forEach(det => ids.push(det.id));\n  ids = ids.join(' ');\n  openAccordionsButton.setAttribute('aria-controls', ids);\n}; // Toggle the state of the main toggle button:\n// If the toggle button is open and clicked, change it's state to the opposite:\n\n\nconst isOpen = button => {\n  button.setAttribute('data-open', 'false');\n  button.setAttribute('aria-expanded', 'false');\n  button.innerText = 'Open all sections';\n  return false;\n}; // If the toggle button is closed and clicked, change it's state to the opposite:\n\n\nconst isClosed = button => {\n  button.setAttribute('data-open', 'true');\n  button.setAttribute('aria-expanded', 'true');\n  button.innerText = 'Close all sections';\n  return true;\n}; // Change the text within the open all button and swap the value of the data open attribute:\n\n\nconst toggleButtonText = button => {\n  if (button.getAttribute('data-open') === 'true') {\n    return isOpen(button);\n  } else if (button.getAttribute('data-open') === 'false') {\n    return isClosed(button);\n  }\n}; // Change the state of the details elements:\n\n\nconst openDetails = detail => {\n  detail.setAttribute('open', 'open');\n  detail.setAttribute('data-detail-open', 'true');\n};\n\nconst closeDetails = detail => {\n  detail.removeAttribute('open');\n  detail.setAttribute('data-detail-open', 'false');\n}; // When we click the expand or close button, loop over the accordions and their buttons and either hide them or show them depending on the state of the button\n\n\nconst expandAccordions = () => {\n  openAccordionsButton.addEventListener('click', function (e) {\n    const expanded = toggleButtonText(openAccordionsButton);\n    let accordions = getAccordions();\n    let buttons = getAccordionButtons();\n    let details = getDetails(); // Manage accordion state:\n\n    accordions.forEach(accordion => {\n      if (expanded && accordion.getAttribute('hidden') !== null) {\n        // Make accordion content visible:\n        accordion.removeAttribute('hidden');\n      }\n\n      if (!expanded && accordion.getAttribute('hidden') === null) {\n        // Hide that accordion content:\n        accordion.setAttribute('hidden', 'hidden');\n      }\n    }); // Manage accordion buttons state:\n\n    buttons.forEach(button => {\n      if (expanded) {\n        // Let screen readers know that the accordion is expanded:\n        button.setAttribute('aria-expanded', 'true');\n      }\n\n      if (!expanded) {\n        // Let screen readers know that the accordion is collapsed:\n        button.setAttribute('aria-expanded', 'false');\n      }\n    }); // Manage details state:\n\n    details.forEach(detail => {\n      if (expanded && detail.getAttribute('open') === null) {\n        openDetails(detail);\n      }\n\n      if (!expanded && detail.getAttribute('open') !== null) {\n        closeDetails(detail);\n      }\n    });\n  });\n};\n\nconst toggleAccordionButtons = () => {\n  let buttons = getAccordionButtons();\n  let details = getDetails(); // Listen for events on the accordion buttons and trigger toggle button side effect\n\n  buttons.forEach(button => {\n    button.addEventListener('click', e => {\n      if (e.target.getAttribute('aria-expanded') === 'false') {\n        openAccordionsButton.setAttribute('data-open', 'false');\n        toggleButtonText(openAccordionsButton);\n        return;\n      }\n    });\n  }); // Listen for events on the details element, manage details state and trigger toggle button side effect\n\n  details.forEach(detail => {\n    detail.addEventListener('click', () => {\n      if (detail.getAttribute('open') === null) {\n        detail.setAttribute('data-detail-open', 'true');\n        openAccordionsButton.setAttribute('data-open', 'false');\n        toggleButtonText(openAccordionsButton);\n        return;\n      } else {\n        detail.setAttribute('data-detail-open', 'false');\n      }\n    });\n  });\n}; // Consolidate accordion buttons and detail elements states into a single array and use to update the toggle button state.\n\n\nconst checkAccordionButtons = () => {\n  let buttons = getAccordionButtons();\n  let details = getDetails();\n  let btnArr = [];\n\n  for (let button of buttons) {\n    btnArr.push(button.getAttribute('aria-expanded'));\n  }\n\n  for (let detail of details) {\n    btnArr.push(detail.getAttribute('data-detail-open'));\n  }\n\n  if (!btnArr.includes('true') && !btnArr.includes('data-detail-open')) {\n    openAccordionsButton.setAttribute('data-open', 'true');\n    toggleButtonText(openAccordionsButton);\n  }\n\n  return btnArr.includes('true') && btnArr.includes('data-detail-open');\n}; // On mutation, run check all buttons: when the state of a button changes, get the new array of button and detail states.\n// Callback function to execute when mutations are observed\n\n\nconst callback = function (mutationsList, observer) {\n  for (const mutation of mutationsList) {\n    if ( // If the aria expanded attribute changes, but not on the main open all section button fire check our accordion state\n    mutation.attributeName === 'aria-expanded' && mutation.target.id !== 'crt-page--expandaccordions' || // Also check if the state of the details elements changes, if so re-run the check accordion buttons so we can update our main button\n    mutation.attributeName === 'data-detail-open') {\n      checkAccordionButtons();\n    }\n  }\n}; // Create an observer instance linked to the callback function\n\n\nconst observer = new MutationObserver(callback); // Start observing the target node for configured mutations\n\nobserver.observe(contentNode, config); // Only do anything if the toogle button is on the page:\n\nif (openAccordionsButton) {\n  //Get our list of item ids so we know what elements the button is controlling:\n  getItemIds(); // Initialize the event handlers\n\n  checkAccordionButtons();\n  toggleAccordionButtons();\n  expandAccordions();\n}\n\n;\n\n//# sourceURL=webpack://federalist-uswds-jekyll/./_assets/js/expand-accordions.js?")}},__webpack_exports__={};__webpack_modules__["./_assets/js/expand-accordions.js"]()})();
