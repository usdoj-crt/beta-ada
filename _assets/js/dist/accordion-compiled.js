/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./_assets/js/utils/expand-accordions.js":
/*!***********************************************!*\
  !*** ./_assets/js/utils/expand-accordions.js ***!
  \***********************************************/
/***/ (function() {

eval("function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar openButton = document.querySelector('#crt-page--expandaccordions'); // Select the node that will be observed for mutations\n\nvar accordionNode = document.querySelector('div.measure-6>div.usa-accordion'); // Options for the observer (which mutations to observe)\n\nvar config = {\n  attributes: true,\n  childList: true,\n  subtree: true\n};\n\nfunction getAccordions() {\n  var regexp = /accordion\\-*/gm;\n  var accordions = Array.from(document.querySelectorAll('div.usa-accordion__content')).filter(function (accordion) {\n    return accordion.id.match(regexp);\n  });\n  return accordions;\n}\n\nfunction getButtons() {\n  var buttons = Array.from(document.querySelectorAll('button.usa-accordion__button.pa11y-skip'));\n  return buttons;\n}\n\nfunction toggleButtonText(button) {\n  if (button.getAttribute('data-open') === 'true') {\n    button.setAttribute('data-open', 'false');\n    button.innerText = 'Open all';\n    return 'closed';\n  } else if (button.getAttribute('data-open') === 'false') {\n    button.setAttribute('data-open', 'true');\n    button.innerText = 'Close all';\n    return 'open';\n  }\n}\n\nfunction expandAccordions() {\n  openButton.addEventListener('click', function (e) {\n    e.preventDefault();\n    var toggle = toggleButtonText(openButton);\n    var accordions = getAccordions();\n    var buttons = getButtons();\n    accordions.forEach(function (accordion) {\n      if (toggle === 'open' && accordion.getAttribute('hidden') !== null) {\n        accordion.removeAttribute('hidden');\n      }\n\n      if (toggle === 'closed' && accordion.getAttribute('hidden') === null) {\n        accordion.setAttribute('hidden', 'hidden');\n      }\n    });\n    buttons.forEach(function (button) {\n      if (toggle === 'open') {\n        button.setAttribute('aria-expanded', 'true');\n      }\n\n      if (toggle === 'closed') {\n        button.setAttribute('aria-expanded', 'false');\n      }\n    });\n  });\n}\n\nfunction checkAllButtons() {\n  var buttons = getButtons();\n  var btnArr = [];\n\n  var _iterator = _createForOfIteratorHelper(buttons),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var button = _step.value;\n      btnArr.push(button.getAttribute('aria-expanded'));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (!btnArr.includes('true')) {\n    openButton.setAttribute('data-open', 'true');\n    toggleButtonText(openButton);\n  }\n\n  return btnArr.includes('true');\n}\n\nfunction toggleButtons() {\n  var buttons = getButtons();\n  buttons.forEach(function (button) {\n    button.addEventListener('click', function (e) {\n      e.preventDefault();\n\n      if (e.target.getAttribute('aria-expanded') === 'false') {\n        openButton.setAttribute('data-open', 'false');\n        toggleButtonText(openButton);\n        return;\n      }\n    });\n  });\n} // On mutation, run check all buttons:\n// Callback function to execute when mutations are observed\n\n\nvar callback = function callback(mutationsList, observer) {\n  var _iterator2 = _createForOfIteratorHelper(mutationsList),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var mutation = _step2.value;\n\n      if (mutation.attributeName === 'aria-expanded') {\n        checkAllButtons();\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}; // Create an observer instance linked to the callback function\n\n\nvar observer = new MutationObserver(callback); // Start observing the target node for configured mutations\n\nobserver.observe(accordionNode, config);\ntoggleButtons();\nexpandAccordions();\n\n//# sourceURL=webpack://federalist-uswds-jekyll/./_assets/js/utils/expand-accordions.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./_assets/js/utils/expand-accordions.js"]();
/******/ 	
/******/ })()
;