/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./_assets/js/utils/expand-accordions.js":
/*!***********************************************!*\
  !*** ./_assets/js/utils/expand-accordions.js ***!
  \***********************************************/
/***/ (function() {

eval("function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// Options for the observer (which mutations to observe)\nvar config = {\n  attributes: true,\n  childList: true,\n  subtree: true\n}; // Grab the button that will actually toggle things:\n\nvar openAccordionsButton = document.querySelector('#crt-page--expandaccordions'); // Select the node that will be observed for mutations\n\nvar contentNode = document.querySelector('#crt-page--content'); // Grab all of the accordions and convert the Nodelist into an array:\n\nvar getAccordions = function getAccordions() {\n  var regexp = /accordion-expandable\\-*/gm;\n  var accordions = Array.from(document.querySelectorAll('.expand div.usa-accordion__content')).filter(function (accordion) {\n    return accordion.id.match(regexp);\n  });\n  return accordions;\n}; // Grab all of the accordion buttons except for the table of contents button and convert the Nodelist into an array:\n\n\nvar getAccordionButtons = function getAccordionButtons() {\n  return Array.from(document.querySelectorAll('.expand button.usa-accordion__button.pa11y-skip'));\n}; // Grab all of the <details> elements and convert the Nodelist into an array:\n\n\nvar getDetails = function getDetails() {\n  return Array.from(document.querySelectorAll('details.expand'));\n}; // Generate a list of all the controllable element ids so we can reference them using aria-controls in our button.\n\n\nvar getItemIds = function getItemIds() {\n  var ids = [];\n  getAccordions().forEach(function (acc) {\n    return ids.push(acc.id);\n  });\n  getDetails().forEach(function (det) {\n    return ids.push(det.id);\n  });\n  ids = ids.join(' ');\n  openAccordionsButton.setAttribute('aria-controls', ids);\n}; // Toggle the state of the main toggle button:\n// If the toggle button is open and clicked, change it's state to the opposite:\n\n\nvar isOpen = function isOpen(button) {\n  button.setAttribute('data-open', 'false');\n  button.setAttribute('aria-expanded', 'false');\n  button.innerText = 'Open all sections';\n  return false;\n}; // If the toggle button is closed and clicked, change it's state to the opposite:\n\n\nvar isClosed = function isClosed(button) {\n  button.setAttribute('data-open', 'true');\n  button.setAttribute('aria-expanded', 'true');\n  button.innerText = 'Close all sections';\n  return true;\n}; // Change the text within the open all button and swap the value of the data open attribute:\n\n\nvar toggleButtonText = function toggleButtonText(button) {\n  if (button.getAttribute('data-open') === 'true') {\n    return isOpen(button);\n  } else if (button.getAttribute('data-open') === 'false') {\n    return isClosed(button);\n  }\n}; // Change the state of the details elements:\n\n\nvar openDetails = function openDetails(detail) {\n  detail.setAttribute('open', 'open');\n  detail.setAttribute('data-detail-open', 'true');\n};\n\nvar closeDetails = function closeDetails(detail) {\n  detail.removeAttribute('open');\n  detail.setAttribute('data-detail-open', 'false');\n}; // When we click the expand or close button, loop over the accordions and their buttons and either hide them or show them depending on the state of the button\n\n\nvar expandAccordions = function expandAccordions() {\n  openAccordionsButton.addEventListener('click', function (e) {\n    var expanded = toggleButtonText(openAccordionsButton);\n    var accordions = getAccordions();\n    var buttons = getAccordionButtons();\n    var details = getDetails(); // Manage accordion state:\n\n    accordions.forEach(function (accordion) {\n      if (expanded && accordion.getAttribute('hidden') !== null) {\n        // Make accordion content visible:\n        accordion.removeAttribute('hidden');\n      }\n\n      if (!expanded && accordion.getAttribute('hidden') === null) {\n        // Hide that accordion content:\n        accordion.setAttribute('hidden', 'hidden');\n      }\n    }); // Manage accordion buttons state:\n\n    buttons.forEach(function (button) {\n      if (expanded) {\n        // Let screen readers know that the accordion is expanded:\n        button.setAttribute('aria-expanded', 'true');\n      }\n\n      if (!expanded) {\n        // Let screen readers know that the accordion is collapsed:\n        button.setAttribute('aria-expanded', 'false');\n      }\n    }); // Manage details state:\n\n    details.forEach(function (detail) {\n      if (expanded && detail.getAttribute('open') === null) {\n        openDetails(detail);\n      }\n\n      if (!expanded && detail.getAttribute('open') !== null) {\n        closeDetails(detail);\n      }\n    });\n  });\n};\n\nvar toggleAccordionButtons = function toggleAccordionButtons() {\n  var buttons = getAccordionButtons();\n  var details = getDetails(); // Listen for events on the accordion buttons and trigger toggle button side effect\n\n  buttons.forEach(function (button) {\n    button.addEventListener('click', function (e) {\n      if (e.target.getAttribute('aria-expanded') === 'false') {\n        openAccordionsButton.setAttribute('data-open', 'false');\n        toggleButtonText(openAccordionsButton);\n        return;\n      }\n    });\n  }); // Listen for events on the details element, manage details state and trigger toggle button side effect\n\n  details.forEach(function (detail) {\n    detail.addEventListener('click', function () {\n      if (detail.getAttribute('open') === null) {\n        detail.setAttribute('data-detail-open', 'true');\n        openAccordionsButton.setAttribute('data-open', 'false');\n        toggleButtonText(openAccordionsButton);\n        return;\n      } else {\n        detail.setAttribute('data-detail-open', 'false');\n      }\n    });\n  });\n}; // Consolidate accordion buttons and detail elements states into a single array and use to update the toggle button state.\n\n\nvar checkAccordionButtons = function checkAccordionButtons() {\n  var buttons = getAccordionButtons();\n  var details = getDetails();\n  var btnArr = [];\n\n  var _iterator = _createForOfIteratorHelper(buttons),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var button = _step.value;\n      btnArr.push(button.getAttribute('aria-expanded'));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(details),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var detail = _step2.value;\n      btnArr.push(detail.getAttribute('data-detail-open'));\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (!btnArr.includes('true') && !btnArr.includes('data-detail-open')) {\n    openAccordionsButton.setAttribute('data-open', 'true');\n    toggleButtonText(openAccordionsButton);\n  }\n\n  return btnArr.includes('true') && btnArr.includes('data-detail-open');\n}; // On mutation, run check all buttons: when the state of a button changes, get the new array of button and detail states.\n// Callback function to execute when mutations are observed\n\n\nvar callback = function callback(mutationsList, observer) {\n  var _iterator3 = _createForOfIteratorHelper(mutationsList),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var mutation = _step3.value;\n\n      if ( // If the aria expanded attribute changes, but not on the main open all section button fire check our accordion state\n      mutation.attributeName === 'aria-expanded' && mutation.target.id !== 'crt-page--expandaccordions' || // Also check if the state of the details elements changes, if so re-run the check accordion buttons so we can update our main button\n      mutation.attributeName === 'data-detail-open') {\n        checkAccordionButtons();\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n}; // Create an observer instance linked to the callback function\n\n\nvar observer = new MutationObserver(callback); // Start observing the target node for configured mutations\n\nobserver.observe(contentNode, config); //Get our list of item ids so we know what elements the button is controlling:\n\ngetItemIds(); // Initialize the event handlers\n\ncheckAccordionButtons();\ntoggleAccordionButtons();\nexpandAccordions();\n\n//# sourceURL=webpack://federalist-uswds-jekyll/./_assets/js/utils/expand-accordions.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./_assets/js/utils/expand-accordions.js"]();
/******/ 	
/******/ })()
;