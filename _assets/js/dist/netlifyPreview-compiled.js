/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./_assets/js/netlify/generateChildElements.js":
/*!*****************************************************!*\
  !*** ./_assets/js/netlify/generateChildElements.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var css_to_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! css-to-style */ \"./node_modules/css-to-style/lib/index.esm.js\");\n\n\nconst generateChildElements = html => html.map(item => {\n  var _item$childNodes;\n\n  if (item.nodeType === Node.TEXT_NODE) return item.wholeText; // To Do: If it's not an element node, we prolly don't care about it, but we should check other types\n  // to make sure.\n\n  if (item.nodeType !== Node.ELEMENT_NODE) return;\n  const itemHasChildren = ((_item$childNodes = item.childNodes) === null || _item$childNodes === void 0 ? void 0 : _item$childNodes.length) > 0;\n  let content = [];\n\n  if (itemHasChildren) {\n    content.push(generateChildElements([...Array.from(item.childNodes)]));\n  } else {\n    content = null;\n  }\n\n  const attrs = Object.fromEntries([...item.attributes].map(attr => {\n    let val = attr.value;\n\n    if (attr.name === 'style') {\n      val = (0,css_to_style__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(attr.value);\n    }\n\n    return [attr.name, val];\n  }));\n  return h(item.nodeName.toLowerCase(), attrs, content);\n});\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (generateChildElements);\n\n//# sourceURL=webpack://federalist-uswds-jekyll/./_assets/js/netlify/generateChildElements.js?");

/***/ }),

/***/ "./_assets/js/netlify/generatePageData.js":
/*!************************************************!*\
  !*** ./_assets/js/netlify/generatePageData.js ***!
  \************************************************/
/***/ (function() {

eval("throw new Error(\"Module parse failed: The top-level-await experiment is not enabled (set experiments.topLevelAwait: true to enabled it)\\nFile was processed with these loaders:\\n * ./node_modules/babel-loader/lib/index.js\\nYou may need an additional loader to handle the result of these loaders.\\nError: The top-level-await experiment is not enabled (set experiments.topLevelAwait: true to enabled it)\\n    at /Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/dependencies/HarmonyDetectionParserPlugin.js:54:11\\n    at Hook.eval [as call] (eval at create (/Users/cindynelson/Desktop/beta-ada/node_modules/tapable/lib/HookCodeFactory.js:19:10), <anonymous>:7:16)\\n    at JavascriptParser.walkAwaitExpression (/Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/javascript/JavascriptParser.js:2314:29)\\n    at JavascriptParser.walkExpression (/Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/javascript/JavascriptParser.js:2244:10)\\n    at JavascriptParser.walkVariableDeclaration (/Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/javascript/JavascriptParser.js:2098:33)\\n    at JavascriptParser.walkStatement (/Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/javascript/JavascriptParser.js:1592:10)\\n    at JavascriptParser.walkStatements (/Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/javascript/JavascriptParser.js:1453:9)\\n    at JavascriptParser.parse (/Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/javascript/JavascriptParser.js:3338:9)\\n    at /Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/NormalModule.js:1082:26\\n    at processResult (/Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/NormalModule.js:795:11)\");\n\n//# sourceURL=webpack://federalist-uswds-jekyll/./_assets/js/netlify/generatePageData.js?");

/***/ }),

/***/ "./_assets/js/netlify/getPreviewLink.js":
/*!**********************************************!*\
  !*** ./_assets/js/netlify/getPreviewLink.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ getPreviewLink; }\n/* harmony export */ });\nconst URL = 'https://federalist-1716bf9c-dd79-4d96-8285-6e56dc391b84.app.cloud.gov/preview/usdoj-crt/beta-ada/cms';\nfunction getPreviewLink(entry) {\n  if (entry.get('status') === '') return null;\n  const card = entry.getIn(['data', 'card']);\n  if (card) return URL + card.get('href');\n  const permalink = entry.getIn(['data', 'permalink']);\n  if (permalink) return URL + permalink;\n  console.error('Unable to build Pages preview link from entry', entry);\n  return null;\n}\n\n//# sourceURL=webpack://federalist-uswds-jekyll/./_assets/js/netlify/getPreviewLink.js?");

/***/ }),

/***/ "./_assets/js/netlify/loadSiteData.js":
/*!********************************************!*\
  !*** ./_assets/js/netlify/loadSiteData.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ loadSiteData; }\n/* harmony export */ });\n/** Modifies window.jekyllSite to contain site data from a few sources. */\nasync function loadSiteData() {\n  const response = await fetch('/site.json');\n  const siteData = await response.json();\n  Object.assign(window.jekyllSite, siteData);\n  Object.assign(window.jekyllSite, getLocalSite());\n}\n/** Some of the jekyll site variables depend on browser context. */\n\nfunction getLocalSite() {\n  return {\n    'baseurl': window.location.origin,\n    'active_lang': 'en'\n  };\n}\n\n//# sourceURL=webpack://federalist-uswds-jekyll/./_assets/js/netlify/loadSiteData.js?");

/***/ }),

/***/ "./_assets/js/netlify/makeError.js":
/*!*****************************************!*\
  !*** ./_assets/js/netlify/makeError.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _generateChildElements__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generateChildElements */ \"./_assets/js/netlify/generateChildElements.js\");\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module './formatPublishDates'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n\n\n/** @jsx h */\n\nfunction makeError(error) {\n  return h(\"div\", {\n    id: \"crt-page--content\",\n    className: \"admin-error-conatiner mobile-lg:grid-col tablet:grid-col-12 desktop:grid-col-8\"\n  }, h(\"h1\", {\n    className: \"admin-error-highlight\"\n  }, \"ADA.gov Admin Error\"), h(\"div\", {\n    className: \"measure-6\"\n  }, h(\"div\", {\n    className: \"crt-lead\"\n  }, h(\"p\", null, \"Couldn't render the template:\"), h(\"code\", null, error.name, \" (\", error.message, \")\"), h(\"p\", null, \"Please edit the code on the left and try again\"), h(\"p\", null, \"Full details:\"), h(\"code\", null, error.stack))));\n}\n\n;\n/* harmony default export */ __webpack_exports__[\"default\"] = (makeError);\n\n//# sourceURL=webpack://federalist-uswds-jekyll/./_assets/js/netlify/makeError.js?");

/***/ }),

/***/ "./_assets/js/netlify/makeHTMLFromBodyContent.js":
/*!*******************************************************!*\
  !*** ./_assets/js/netlify/makeHTMLFromBodyContent.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _renderMdWidgets__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./renderMdWidgets */ \"./_assets/js/netlify/renderMdWidgets.js\");\n\nconst md = window.markdownit();\nmd.options['html'] = true;\nmd.options['linkify'] = true;\nconst parser = new DOMParser();\n\nfunction makeHTMLFromBodyContent(bodyContent, variables, imageData) {\n  // Replace any <hr> tags with markdown so they render outside of the nearest <p> tag\n  let content = (bodyContent === null || bodyContent === void 0 ? void 0 : bodyContent.replaceAll(/<hr>/g, \"***\").replaceAll(\"{{'\", '').replaceAll(\"' | relative_url}}\", '')) || '';\n  const contentParts = content.split('{');\n  contentParts.forEach(contentPart => {\n    if (contentPart.includes('% details') || contentPart.includes('% asset')) {\n      const newText = contentPart.replaceAll(\"'\", '$');\n      content = content.replace(contentPart, newText);\n    }\n  }); // The DOMParser returns a full HTML document, so grabbing the first child element actually grabs the <html> element because it is the first element under <!doctype>\n  // the second child element of the <html> is the <body> element. We aren't starting at the <html> element but rather the <!doctype> tag.\n\n  const interimHTML = md.render(content);\n  const renderedHTML = (0,_renderMdWidgets__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(interimHTML, variables, imageData);\n  const html = parser.parseFromString(renderedHTML, 'text/html');\n  const elementsArray = Array.from(html.children[0].children[1].childNodes);\n  return elementsArray;\n}\n\n;\n/* harmony default export */ __webpack_exports__[\"default\"] = (makeHTMLFromBodyContent);\n\n//# sourceURL=webpack://federalist-uswds-jekyll/./_assets/js/netlify/makeHTMLFromBodyContent.js?");

/***/ }),

/***/ "./_assets/js/netlify/makeTemplate.js":
/*!********************************************!*\
  !*** ./_assets/js/netlify/makeTemplate.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _generateChildElements__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generateChildElements */ \"./_assets/js/netlify/generateChildElements.js\");\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module './formatPublishDates'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n\n\n/** @jsx h */\n\nfunction makeTemplate(data) {\n  const {\n    previewLink,\n    title,\n    leadText,\n    body,\n    publishDate,\n    updatedDate,\n    print,\n    pdf,\n    relatedContent\n  } = data;\n  return h(\"div\", {\n    id: \"crt-page--content\",\n    className: \"mobile-lg:grid-col tablet:grid-col-12 desktop:grid-col-8\"\n  }, h(\"div\", {\n    className: \"width-full padding-bottom-2 padding-top-2 border-bottom\"\n  }, previewLink ? h(\"a\", {\n    href: previewLink,\n    target: \"_blank\",\n    className: \"margin-top-4 text-bold line-height-mono-6\"\n  }, \"Page preview link\") : h(\"p\", null, \"No preview link available. Save changes to entry to generate preview.\")), h(\"h1\", null, title), h(\"div\", {\n    className: \"measure-6\"\n  }, h(\"div\", {\n    className: \"crt-lead\"\n  }, h(\"p\", null, leadText), h(\"div\", {\n    id: \"crt-page--printbutton--wrapper\",\n    className: \"desktop:margin-top-3 margin-bottom-2 width-card\"\n  }, print ? h(\"button\", {\n    id: \"crt-page--printbutton\",\n    className: \"usa-button\"\n  }, \"Print this page\") : null), h(\"div\", {\n    className: \"mobile:margin-bottom-4 margin-bottom-2 width-card\"\n  }, pdf ? h(\"a\", {\n    className: \"usa-button crt-page--downloadpdf-button text-bold\"\n  }, \"Download PDF Guidance\") : null)), publishDate ? h(\"p\", null, ' ', h(\"time\", null, Object(function webpackMissingModule() { var e = new Error(\"Cannot find module './formatPublishDates'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(publishDate)), ' ') : null, updatedDate ? h(\"p\", null, ' ', h(\"time\", null, \" `Last updated:\", Object(function webpackMissingModule() { var e = new Error(\"Cannot find module './formatPublishDates'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(updatedDate)), ' ') : null, (0,_generateChildElements__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(body), relatedContent ? h(\"div\", {\n    className: \"usa-summary-box related-content-container border-0 padding-2 bg-primary-lighter\"\n  }, ' ', h(\"h3\", {\n    className: \"usa-summary-box__heading\",\n    id: \"related-content-header\"\n  }, \"Related Content\"), ' ', h(\"div\", {\n    className: \"usa-summary-box__text\"\n  }, \"Related content tags\")) : null));\n}\n\n;\n/* harmony default export */ __webpack_exports__[\"default\"] = (makeTemplate);\n\n//# sourceURL=webpack://federalist-uswds-jekyll/./_assets/js/netlify/makeTemplate.js?");

/***/ }),

/***/ "./_assets/js/netlify/preview.js":
/*!***************************************!*\
  !*** ./_assets/js/netlify/preview.js ***!
  \***************************************/
/***/ (function() {

eval("throw new Error(\"Module parse failed: The top-level-await experiment is not enabled (set experiments.topLevelAwait: true to enabled it)\\nFile was processed with these loaders:\\n * ./node_modules/babel-loader/lib/index.js\\nYou may need an additional loader to handle the result of these loaders.\\nError: The top-level-await experiment is not enabled (set experiments.topLevelAwait: true to enabled it)\\n    at /Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/dependencies/HarmonyDetectionParserPlugin.js:54:11\\n    at Hook.eval [as call] (eval at create (/Users/cindynelson/Desktop/beta-ada/node_modules/tapable/lib/HookCodeFactory.js:19:10), <anonymous>:7:16)\\n    at Hook.CALL_DELEGATE [as _call] (/Users/cindynelson/Desktop/beta-ada/node_modules/tapable/lib/Hook.js:14:14)\\n    at JavascriptParser.walkAwaitExpression (/Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/javascript/JavascriptParser.js:2314:29)\\n    at JavascriptParser.walkExpression (/Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/javascript/JavascriptParser.js:2244:10)\\n    at JavascriptParser.walkExpressionStatement (/Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/javascript/JavascriptParser.js:1632:8)\\n    at JavascriptParser.walkStatement (/Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/javascript/JavascriptParser.js:1559:10)\\n    at JavascriptParser.walkStatements (/Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/javascript/JavascriptParser.js:1453:9)\\n    at JavascriptParser.parse (/Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/javascript/JavascriptParser.js:3338:9)\\n    at /Users/cindynelson/Desktop/beta-ada/node_modules/webpack/lib/NormalModule.js:1082:26\");\n\n//# sourceURL=webpack://federalist-uswds-jekyll/./_assets/js/netlify/preview.js?");

/***/ }),

/***/ "./_assets/js/netlify/renderMdWidgets.js":
/*!***********************************************!*\
  !*** ./_assets/js/netlify/renderMdWidgets.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var liquidjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! liquidjs */ \"./node_modules/liquidjs/dist/liquid.browser.esm.js\");\n\nconst tagNames = ['accordion', 'asset', 'collapsible', 'details', 'figcaption', 'figure', 'fn', 'fnbody', 'footnotes', 'list', 'list_item'];\n\nfunction getImagePath(imageTitle, imageData) {\n  const imageListPaths = imageData['imageList'].filter(image => image['path'] != null && image['path'].includes(imageTitle)).map(image => \"https://raw.githubusercontent.com/usdoj-crt/beta-ada/main/_assets/images/\" + image['path']);\n  return imageListPaths.length > 0 ? imageListPaths[0] : imageData['newImagePath'] + imageTitle;\n}\n\nfunction buildEngine(globals, imageData) {\n  const engine = new liquidjs__WEBPACK_IMPORTED_MODULE_0__.Liquid({\n    jekyllInclude: true,\n    partials: '/_includes',\n    ownPropertyOnly: false,\n    globals\n  });\n  tagNames.forEach(tagName => {\n    engine.registerTag(tagName, {\n      parse(tagToken, remainTokens) {\n        this.value = tagToken.args;\n\n        if (tagName !== 'fn' && tagName !== 'asset') {\n          this.tpls = [];\n          this.liquid.parser.parseStream(remainTokens).on('template', tpl => this.tpls.push(tpl)) // note that we cannot use arrow function because we need `this`\n          .on('tag:end'.concat(tagName), function () {\n            this.stop();\n          }).on('end', () => {\n            throw new Error(`tag ${tagToken.getText()} not closed`);\n          }).start();\n        }\n      },\n\n      *render(context, emitter) {\n        var _content$0$split$, _content$0$split$$rep;\n\n        // It's possible to use templating inside of tags, so resolve that first:\n        const renderedValue = this.liquid.parseAndRenderSync(this.value, context, emitter);\n\n        switch (tagName) {\n          case 'accordion':\n            const options = renderedValue.split(' ');\n            const accId = `accordion-${options[0].trim()}`;\n            const multiselect = options.includes('multiselect');\n            const expandable = options.includes('expandable');\n            context._accordionID = accId;\n            context._collapsedIDX = 1;\n            emitter.write(`<div class=\"usa-accordion netlify-preview ${expandable ? 'expand' : null}\" ${multiselect ? 'aria-multiselectable=\"true\"' : null}>`);\n            yield this.liquid.renderer.renderTemplates(this.tpls, context, emitter);\n            emitter.write('</div>');\n            break;\n\n          case 'asset':\n            const valArr = renderedValue.split(' ');\n            const imagePathRaw = valArr[0].replaceAll(/(^')|('$)/g, '');\n            const imagePathArr = imagePathRaw.split('/');\n            const imageTitle = imagePathArr[imagePathArr.length - 1];\n            const imagePath = getImagePath(imageTitle, imageData);\n            emitter.write(`<img src=\"${imagePath}\">`);\n            break;\n\n          case 'collapsible':\n            const accordionID = context._accordionID;\n            let idx = context._collapsedIDX;\n            const collapsedID = `${accordionID}-${idx}`;\n            context._collapsedIDX += 1;\n            const htag = this.tpls[0].str.includes('<h2>') ? 'h2' : 'h3';\n            const content = this.tpls[0].str.split('</' + htag + '>');\n            const heading = (_content$0$split$ = content[0].split('<' + htag + '>')[1]) === null || _content$0$split$ === void 0 ? void 0 : (_content$0$split$$rep = _content$0$split$.replace('<' + htag + '>', '')) === null || _content$0$split$$rep === void 0 ? void 0 : _content$0$split$$rep.replace('</' + htag + '>', '');\n            emitter.write(`<h2 class=\"usa-accordion__heading\"\">\n                 <button class=\"usa-accordion__button pa11y-skip\"\n                   aria-expanded=\"true\"\n                   aria-controls=\"${collapsedID}\">\n                   ${heading}\n                 </button>\n               </h2>\n               <div id=\"${collapsedID}\" class=\"usa-accordion__content usa-prose\">`);\n            yield this.liquid.renderer.renderTemplates(this.tpls, context, emitter);\n            emitter.write('</div>');\n            break;\n\n          case 'details':\n            const detailTitleArr = renderedValue.split('expandable');\n            const detailTitle = yield detailTitleArr[0].replaceAll('$', \"'\");\n            emitter.write(`<details data-detail-open='false'><summary><div><span class='pa11y-skip'>${detailTitle}</span></div></summary><div><p>`);\n            yield this.liquid.renderer.renderTemplates(this.tpls, context, emitter);\n            emitter.write('</p></div></details>');\n            break;\n\n          case 'figcaption':\n            emitter.write(`<figcaption>`);\n            yield this.liquid.renderer.renderTemplates(this.tpls, context, emitter);\n            emitter.write('</figcaption>');\n            break;\n\n          case 'figure':\n            const figTitle = renderedValue;\n            const figId = figTitle.toLowerCase().trim().replaceAll(/\\s/g, '');\n            emitter.write(`<figure id=${figId}>\n                 <strong>${figTitle}</strong><br/>`);\n            yield this.liquid.renderer.renderTemplates(this.tpls, context, emitter);\n            emitter.write('</figure>');\n            break;\n\n          case 'fn':\n            const fnId = renderedValue;\n            return `<sup><a href=\"#fn:${fnId}\" class=\"footnote\" id=\"fn-back:${fnId}\">${fnId}</a></sup>`;\n\n          case 'fnbody':\n            const fnBodyId = renderedValue.trim();\n            emitter.write(`<li id='fn:${fnBodyId}' class='footnotebody' value='${fnBodyId}'>`);\n            yield this.liquid.renderer.renderTemplates(this.tpls, context, emitter);\n            emitter.write(`<a href='#fn-back:${fnBodyId}' class='backlink'>Back to text</a>`);\n            break;\n\n          case 'footnotes':\n            emitter.write(`<div class='footnotes'><ol class='footnotelist'>`);\n            yield this.liquid.renderer.renderTemplates(this.tpls, context, emitter);\n            emitter.write('</ol></div>');\n            break;\n\n          case 'list':\n            const listIconType = renderedValue;\n            context._iconType = listIconType;\n            emitter.write(\"<ul class='usa-icon-list margin-bottom-2'>\");\n            yield this.liquid.renderer.renderTemplates(this.tpls, context, emitter);\n            emitter.write('</ul>');\n            break;\n\n          case 'list_item':\n            const listItemIconType = context._iconType;\n            emitter.write(`<li class='usa-icon-list__item'>\n                   <div class='usa-icon-list__icon'>\n                     <div class='usa-icon' aria-hidden='true'\n                         style=\"background-image:url('${window.location.origin}/assets/img/usa-icons/${listItemIconType}.svg')\"\n                         >\n                     </div>\n                   </div>\n                   <div class='usa-icon-list__content'>\n                 `);\n            yield this.liquid.renderer.renderTemplates(this.tpls, context, emitter);\n            emitter.write('</div></li>');\n            break;\n\n          default:\n            break;\n        }\n      }\n\n    });\n  });\n  return engine;\n}\n\nfunction renderWidgets(interimHTML, variables, imageData) {\n  const parser = new DOMParser();\n  let newHTML = interimHTML;\n  const htmlDoc = parser.parseFromString(interimHTML, 'text/html');\n  const pTags = Array.from(htmlDoc.getElementsByTagName('p'));\n  pTags.forEach(pTag => {\n    if (pTag.innerText.includes('{% details')) {\n      const newText = pTag.innerText.replaceAll(\"'\", '');\n      newHTML = newHTML.replaceAll(pTag.innerText, newText);\n    }\n  });\n  const engine = buildEngine({\n    'page': variables,\n    'site': window.jekyllSite,\n    // This is defined globally via site_json.rb\n    'lang': 'en'\n  }, imageData);\n  const renderedHTML = engine.parseAndRenderSync(newHTML);\n  return renderedHTML;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (renderWidgets);\n\n//# sourceURL=webpack://federalist-uswds-jekyll/./_assets/js/netlify/renderMdWidgets.js?");

/***/ }),

/***/ "./node_modules/css-to-style/lib/index.esm.js":
/*!****************************************************!*\
  !*** ./node_modules/css-to-style/lib/index.esm.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// Convert a string from kebab-case to camelCase\nvar camelCase = function camelCase(string) {\n  return string.replace(/\\-(\\w|$)/g, function (m, p1) {\n    return p1.toUpperCase();\n  });\n};\n\nvar convertPropertyName = function convertPropertyName(prop) {\n  prop = prop.toLowerCase(); // Always return 'float' as 'cssFloat'\n\n  if (prop === 'float') {\n    return 'cssFloat';\n  } // Skip CSS variables\n\n\n  if (prop.startsWith('--')) {\n    return prop;\n  } // Handle `-ms-` prefix to camelCase as msPropertyName, not MsPropertyName\n\n\n  if (prop.startsWith('-ms-')) {\n    prop = prop.substr(1);\n  }\n\n  return camelCase(prop);\n};\n\nvar splitDeclarations = function splitDeclarations(cssText) {\n  var declarations = [];\n  var capturing;\n  var i = cssText.length;\n  var last = i; // Split into declarations by semi-colon (outside quotes or parentheses)\n\n  while (i-- > -1) {\n    // Capture unescaped quotes\n    if ((cssText[i] === '\"' || cssText[i] === \"'\") && cssText[i - 1] !== '\\\\') {\n      if (!capturing) {\n        capturing = cssText[i];\n      } else if (cssText[i] === capturing) {\n        capturing = false;\n      }\n    } // Start capturing parentheses\n\n\n    if (!capturing && cssText[i] === ')') {\n      capturing = cssText[i];\n    } // Stop capturing parentheses\n\n\n    if (cssText[i] === '(' && capturing === ')') {\n      capturing = false;\n    } // Split at semi-colon\n\n\n    if (i < 0 || !capturing && cssText[i] === ';') {\n      declarations.unshift(cssText.slice(i + 1, last));\n      last = i;\n    }\n  }\n\n  return declarations;\n};\n\nvar splitDeclaration = function splitDeclaration(declaration) {\n  var i = declaration.indexOf(':');\n  return [declaration.substr(0, i).trim(), declaration.substr(i + 1).trim()];\n};\n\nvar cssToStyle = function cssToStyle(cssText) {\n  return splitDeclarations(cssText).map(splitDeclaration).filter(function (_ref) {\n    var name = _ref[0],\n        value = _ref[1];\n    return name && value;\n  }).reduce(function (styles, _ref2) {\n    var name = _ref2[0],\n        value = _ref2[1];\n    styles[convertPropertyName(name)] = value;\n    return styles;\n  }, {});\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (cssToStyle);\n//# sourceMappingURL=index.esm.js.map\n\n\n//# sourceURL=webpack://federalist-uswds-jekyll/./node_modules/css-to-style/lib/index.esm.js?");

/***/ }),

/***/ "./node_modules/liquidjs/dist/liquid.browser.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/liquidjs/dist/liquid.browser.esm.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AssertionError\": function() { return /* binding */ AssertionError; },\n/* harmony export */   \"AssignTag\": function() { return /* binding */ AssignTag; },\n/* harmony export */   \"BlockTag\": function() { return /* binding */ BlockTag; },\n/* harmony export */   \"BreakTag\": function() { return /* binding */ BreakTag; },\n/* harmony export */   \"CaptureTag\": function() { return /* binding */ CaptureTag; },\n/* harmony export */   \"CaseTag\": function() { return /* binding */ CaseTag; },\n/* harmony export */   \"CommentTag\": function() { return /* binding */ CommentTag; },\n/* harmony export */   \"Context\": function() { return /* binding */ Context; },\n/* harmony export */   \"ContinueTag\": function() { return /* binding */ ContinueTag; },\n/* harmony export */   \"CycleTag\": function() { return /* binding */ CycleTag; },\n/* harmony export */   \"DecrementTag\": function() { return /* binding */ DecrementTag; },\n/* harmony export */   \"Drop\": function() { return /* binding */ Drop; },\n/* harmony export */   \"EchoTag\": function() { return /* binding */ EchoTag; },\n/* harmony export */   \"Expression\": function() { return /* binding */ Expression; },\n/* harmony export */   \"Filter\": function() { return /* binding */ Filter; },\n/* harmony export */   \"ForTag\": function() { return /* binding */ ForTag; },\n/* harmony export */   \"Hash\": function() { return /* binding */ Hash; },\n/* harmony export */   \"IfTag\": function() { return /* binding */ IfTag; },\n/* harmony export */   \"IncludeTag\": function() { return /* binding */ IncludeTag; },\n/* harmony export */   \"IncrementTag\": function() { return /* binding */ IncrementTag; },\n/* harmony export */   \"InlineCommentTag\": function() { return /* binding */ InlineCommentTag; },\n/* harmony export */   \"LayoutTag\": function() { return /* binding */ LayoutTag; },\n/* harmony export */   \"Liquid\": function() { return /* binding */ Liquid; },\n/* harmony export */   \"LiquidError\": function() { return /* binding */ LiquidError; },\n/* harmony export */   \"LiquidTag\": function() { return /* binding */ LiquidTag; },\n/* harmony export */   \"Output\": function() { return /* binding */ Output; },\n/* harmony export */   \"ParseError\": function() { return /* binding */ ParseError; },\n/* harmony export */   \"ParseStream\": function() { return /* binding */ ParseStream; },\n/* harmony export */   \"RawTag\": function() { return /* binding */ RawTag; },\n/* harmony export */   \"RenderError\": function() { return /* binding */ RenderError; },\n/* harmony export */   \"RenderTag\": function() { return /* binding */ RenderTag; },\n/* harmony export */   \"TablerowTag\": function() { return /* binding */ TablerowTag; },\n/* harmony export */   \"Tag\": function() { return /* binding */ Tag; },\n/* harmony export */   \"TagToken\": function() { return /* binding */ TagToken; },\n/* harmony export */   \"TimezoneDate\": function() { return /* binding */ TimezoneDate; },\n/* harmony export */   \"Token\": function() { return /* binding */ Token; },\n/* harmony export */   \"TokenKind\": function() { return /* binding */ TokenKind; },\n/* harmony export */   \"TokenizationError\": function() { return /* binding */ TokenizationError; },\n/* harmony export */   \"Tokenizer\": function() { return /* binding */ Tokenizer; },\n/* harmony export */   \"TypeGuards\": function() { return /* binding */ typeGuards; },\n/* harmony export */   \"UndefinedVariableError\": function() { return /* binding */ UndefinedVariableError; },\n/* harmony export */   \"UnlessTag\": function() { return /* binding */ UnlessTag; },\n/* harmony export */   \"Value\": function() { return /* binding */ Value; },\n/* harmony export */   \"assert\": function() { return /* binding */ assert; },\n/* harmony export */   \"createTrie\": function() { return /* binding */ createTrie; },\n/* harmony export */   \"defaultOperators\": function() { return /* binding */ defaultOperators; },\n/* harmony export */   \"defaultOptions\": function() { return /* binding */ defaultOptions; },\n/* harmony export */   \"evalQuotedToken\": function() { return /* binding */ evalQuotedToken; },\n/* harmony export */   \"evalToken\": function() { return /* binding */ evalToken; },\n/* harmony export */   \"filters\": function() { return /* binding */ filters; },\n/* harmony export */   \"isFalsy\": function() { return /* binding */ isFalsy; },\n/* harmony export */   \"isTruthy\": function() { return /* binding */ isTruthy; },\n/* harmony export */   \"tags\": function() { return /* binding */ tags; },\n/* harmony export */   \"toPromise\": function() { return /* binding */ toPromise; },\n/* harmony export */   \"toValue\": function() { return /* binding */ toValue; },\n/* harmony export */   \"toValueSync\": function() { return /* binding */ toValueSync; },\n/* harmony export */   \"version\": function() { return /* binding */ version; }\n/* harmony export */ });\n/*\n * liquidjs@10.7.0, https://github.com/harttle/liquidjs\n * (c) 2016-2023 harttle\n * Released under the MIT License.\n */\nclass Token {\r\n    constructor(kind, input, begin, end, file) {\r\n        this.kind = kind;\r\n        this.input = input;\r\n        this.begin = begin;\r\n        this.end = end;\r\n        this.file = file;\r\n    }\r\n    getText() {\r\n        return this.input.slice(this.begin, this.end);\r\n    }\r\n    getPosition() {\r\n        let [row, col] = [1, 1];\r\n        for (let i = 0; i < this.begin; i++) {\r\n            if (this.input[i] === '\\n') {\r\n                row++;\r\n                col = 1;\r\n            }\r\n            else\r\n                col++;\r\n        }\r\n        return [row, col];\r\n    }\r\n    size() {\r\n        return this.end - this.begin;\r\n    }\r\n}\n\nclass Drop {\r\n    liquidMethodMissing(key) {\r\n        return undefined;\r\n    }\r\n}\n\nconst toString$1 = Object.prototype.toString;\r\nconst toLowerCase = String.prototype.toLowerCase;\r\nconst hasOwnProperty = Object.hasOwnProperty;\r\nfunction isString(value) {\r\n    return typeof value === 'string';\r\n}\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction isFunction(value) {\r\n    return typeof value === 'function';\r\n}\r\nfunction isPromise(val) {\r\n    return val && isFunction(val.then);\r\n}\r\nfunction isIterator(val) {\r\n    return val && isFunction(val.next) && isFunction(val.throw) && isFunction(val.return);\r\n}\r\nfunction escapeRegex(str) {\r\n    return str.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n}\r\nfunction stringify(value) {\r\n    value = toValue(value);\r\n    if (isString(value))\r\n        return value;\r\n    if (isNil(value))\r\n        return '';\r\n    if (isArray(value))\r\n        return value.map(x => stringify(x)).join('');\r\n    return String(value);\r\n}\r\nfunction toValue(value) {\r\n    return (value instanceof Drop && isFunction(value.valueOf)) ? value.valueOf() : value;\r\n}\r\nfunction isNumber(value) {\r\n    return typeof value === 'number';\r\n}\r\nfunction toLiquid(value) {\r\n    if (value && isFunction(value.toLiquid))\r\n        return toLiquid(value.toLiquid());\r\n    return value;\r\n}\r\nfunction isNil(value) {\r\n    return value == null;\r\n}\r\nfunction isArray(value) {\r\n    // be compatible with IE 8\r\n    return toString$1.call(value) === '[object Array]';\r\n}\r\nfunction isIterable(value) {\r\n    return isObject(value) && Symbol.iterator in value;\r\n}\r\n/*\r\n * Iterates over own enumerable string keyed properties of an object and invokes iteratee for each property.\r\n * The iteratee is invoked with three arguments: (value, key, object).\r\n * Iteratee functions may exit iteration early by explicitly returning false.\r\n * @param {Object} object The object to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @return {Object} Returns object.\r\n */\r\nfunction forOwn(obj, iteratee) {\r\n    obj = obj || {};\r\n    for (const k in obj) {\r\n        if (hasOwnProperty.call(obj, k)) {\r\n            if (iteratee(obj[k], k, obj) === false)\r\n                break;\r\n        }\r\n    }\r\n    return obj;\r\n}\r\nfunction last(arr) {\r\n    return arr[arr.length - 1];\r\n}\r\n/*\r\n * Checks if value is the language type of Object.\r\n * (e.g. arrays, functions, objects, regexes, new Number(0), and new String(''))\r\n * @param {any} value The value to check.\r\n * @return {Boolean} Returns true if value is an object, else false.\r\n */\r\nfunction isObject(value) {\r\n    const type = typeof value;\r\n    return value !== null && (type === 'object' || type === 'function');\r\n}\r\nfunction range(start, stop, step = 1) {\r\n    const arr = [];\r\n    for (let i = start; i < stop; i += step) {\r\n        arr.push(i);\r\n    }\r\n    return arr;\r\n}\r\nfunction padStart(str, length, ch = ' ') {\r\n    return pad(str, length, ch, (str, ch) => ch + str);\r\n}\r\nfunction padEnd(str, length, ch = ' ') {\r\n    return pad(str, length, ch, (str, ch) => str + ch);\r\n}\r\nfunction pad(str, length, ch, add) {\r\n    str = String(str);\r\n    let n = length - str.length;\r\n    while (n-- > 0)\r\n        str = add(str, ch);\r\n    return str;\r\n}\r\nfunction identify(val) {\r\n    return val;\r\n}\r\nfunction changeCase(str) {\r\n    const hasLowerCase = [...str].some(ch => ch >= 'a' && ch <= 'z');\r\n    return hasLowerCase ? str.toUpperCase() : str.toLowerCase();\r\n}\r\nfunction ellipsis(str, N) {\r\n    return str.length > N ? str.slice(0, N - 3) + '...' : str;\r\n}\r\n// compare string in case-insensitive way, undefined values to the tail\r\nfunction caseInsensitiveCompare(a, b) {\r\n    if (a == null && b == null)\r\n        return 0;\r\n    if (a == null)\r\n        return 1;\r\n    if (b == null)\r\n        return -1;\r\n    a = toLowerCase.call(a);\r\n    b = toLowerCase.call(b);\r\n    if (a < b)\r\n        return -1;\r\n    if (a > b)\r\n        return 1;\r\n    return 0;\r\n}\r\nfunction argumentsToValue(fn) {\r\n    return (...args) => fn(...args.map(toValue));\r\n}\r\nfunction escapeRegExp(text) {\r\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n}\n\nclass LiquidError extends Error {\r\n    constructor(err, token) {\r\n        super(err.message);\r\n        this.originalError = err;\r\n        this.token = token;\r\n        this.context = '';\r\n    }\r\n    update() {\r\n        const err = this.originalError;\r\n        this.context = mkContext(this.token);\r\n        this.message = mkMessage(err.message, this.token);\r\n        this.stack = this.message + '\\n' + this.context +\r\n            '\\n' + this.stack + '\\nFrom ' + err.stack;\r\n    }\r\n}\r\nclass TokenizationError extends LiquidError {\r\n    constructor(message, token) {\r\n        super(new Error(message), token);\r\n        this.name = 'TokenizationError';\r\n        super.update();\r\n    }\r\n}\r\nclass ParseError extends LiquidError {\r\n    constructor(err, token) {\r\n        super(err, token);\r\n        this.name = 'ParseError';\r\n        this.message = err.message;\r\n        super.update();\r\n    }\r\n}\r\nclass RenderError extends LiquidError {\r\n    constructor(err, tpl) {\r\n        super(err, tpl.token);\r\n        this.name = 'RenderError';\r\n        this.message = err.message;\r\n        super.update();\r\n    }\r\n    static is(obj) {\r\n        return obj.name === 'RenderError';\r\n    }\r\n}\r\nclass UndefinedVariableError extends LiquidError {\r\n    constructor(err, token) {\r\n        super(err, token);\r\n        this.name = 'UndefinedVariableError';\r\n        this.message = err.message;\r\n        super.update();\r\n    }\r\n}\r\n// only used internally; raised where we don't have token information,\r\n// so it can't be an UndefinedVariableError.\r\nclass InternalUndefinedVariableError extends Error {\r\n    constructor(variableName) {\r\n        super(`undefined variable: ${variableName}`);\r\n        this.name = 'InternalUndefinedVariableError';\r\n        this.variableName = variableName;\r\n    }\r\n}\r\nclass AssertionError extends Error {\r\n    constructor(message) {\r\n        super(message);\r\n        this.name = 'AssertionError';\r\n        this.message = message + '';\r\n    }\r\n}\r\nfunction mkContext(token) {\r\n    const [line] = token.getPosition();\r\n    const lines = token.input.split('\\n');\r\n    const begin = Math.max(line - 2, 1);\r\n    const end = Math.min(line + 3, lines.length);\r\n    const context = range(begin, end + 1)\r\n        .map(lineNumber => {\r\n        const indicator = (lineNumber === line) ? '>> ' : '   ';\r\n        const num = padStart(String(lineNumber), String(end).length);\r\n        const text = lines[lineNumber - 1];\r\n        return `${indicator}${num}| ${text}`;\r\n    })\r\n        .join('\\n');\r\n    return context;\r\n}\r\nfunction mkMessage(msg, token) {\r\n    if (token.file)\r\n        msg += `, file:${token.file}`;\r\n    const [line, col] = token.getPosition();\r\n    msg += `, line:${line}, col:${col}`;\r\n    return msg;\r\n}\n\n// **DO NOT CHANGE THIS FILE**\r\n//\r\n// This file is generated by bin/character-gen.js\r\n// bitmask character types to boost performance\r\nconst TYPES = [0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 4, 4, 4, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 64, 0, 65, 0, 0, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 0, 0, 2, 2, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0];\r\nconst IDENTIFIER = 1;\r\nconst BLANK = 4;\r\nconst QUOTE = 8;\r\nconst INLINE_BLANK = 16;\r\nconst NUMBER = 32;\r\nconst SIGN = 64;\r\nTYPES[160] = TYPES[5760] = TYPES[6158] = TYPES[8192] = TYPES[8193] = TYPES[8194] = TYPES[8195] = TYPES[8196] = TYPES[8197] = TYPES[8198] = TYPES[8199] = TYPES[8200] = TYPES[8201] = TYPES[8202] = TYPES[8232] = TYPES[8233] = TYPES[8239] = TYPES[8287] = TYPES[12288] = BLANK;\n\nfunction assert(predicate, message) {\r\n    if (!predicate) {\r\n        const msg = typeof message === 'function'\r\n            ? message()\r\n            : (message || `expect ${predicate} to be true`);\r\n        throw new AssertionError(msg);\r\n    }\r\n}\n\nclass NullDrop extends Drop {\r\n    equals(value) {\r\n        return isNil(toValue(value));\r\n    }\r\n    gt() {\r\n        return false;\r\n    }\r\n    geq() {\r\n        return false;\r\n    }\r\n    lt() {\r\n        return false;\r\n    }\r\n    leq() {\r\n        return false;\r\n    }\r\n    valueOf() {\r\n        return null;\r\n    }\r\n}\n\nclass EmptyDrop extends Drop {\r\n    equals(value) {\r\n        if (value instanceof EmptyDrop)\r\n            return false;\r\n        value = toValue(value);\r\n        if (isString(value) || isArray(value))\r\n            return value.length === 0;\r\n        if (isObject(value))\r\n            return Object.keys(value).length === 0;\r\n        return false;\r\n    }\r\n    gt() {\r\n        return false;\r\n    }\r\n    geq() {\r\n        return false;\r\n    }\r\n    lt() {\r\n        return false;\r\n    }\r\n    leq() {\r\n        return false;\r\n    }\r\n    valueOf() {\r\n        return '';\r\n    }\r\n}\n\nclass BlankDrop extends EmptyDrop {\r\n    equals(value) {\r\n        if (value === false)\r\n            return true;\r\n        if (isNil(toValue(value)))\r\n            return true;\r\n        if (isString(value))\r\n            return /^\\s*$/.test(value);\r\n        return super.equals(value);\r\n    }\r\n}\n\nclass ForloopDrop extends Drop {\r\n    constructor(length, collection, variable) {\r\n        super();\r\n        this.i = 0;\r\n        this.length = length;\r\n        this.name = `${variable}-${collection}`;\r\n    }\r\n    next() {\r\n        this.i++;\r\n    }\r\n    index0() {\r\n        return this.i;\r\n    }\r\n    index() {\r\n        return this.i + 1;\r\n    }\r\n    first() {\r\n        return this.i === 0;\r\n    }\r\n    last() {\r\n        return this.i === this.length - 1;\r\n    }\r\n    rindex() {\r\n        return this.length - this.i;\r\n    }\r\n    rindex0() {\r\n        return this.length - this.i - 1;\r\n    }\r\n    valueOf() {\r\n        return JSON.stringify(this);\r\n    }\r\n}\n\nclass BlockDrop extends Drop {\r\n    constructor(\r\n    // the block render from layout template\r\n    superBlockRender = () => '') {\r\n        super();\r\n        this.superBlockRender = superBlockRender;\r\n    }\r\n    /**\r\n     * Provide parent access in child block by\r\n     * {{ block.super }}\r\n     */\r\n    super() {\r\n        return this.superBlockRender();\r\n    }\r\n}\n\nfunction isComparable(arg) {\r\n    return arg && isFunction(arg.equals);\r\n}\n\nconst nil = new NullDrop();\r\nconst literalValues = {\r\n    'true': true,\r\n    'false': false,\r\n    'nil': nil,\r\n    'null': nil,\r\n    'empty': new EmptyDrop(),\r\n    'blank': new BlankDrop()\r\n};\n\nfunction createTrie(operators) {\r\n    const trie = {};\r\n    for (const [name, handler] of Object.entries(operators)) {\r\n        let node = trie;\r\n        for (let i = 0; i < name.length; i++) {\r\n            const c = name[i];\r\n            node[c] = node[c] || {};\r\n            if (i === name.length - 1 && (TYPES[name.charCodeAt(i)] & IDENTIFIER)) {\r\n                node[c].needBoundary = true;\r\n            }\r\n            node = node[c];\r\n        }\r\n        node.handler = handler;\r\n        node.end = true;\r\n    }\r\n    return trie;\r\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\n// convert an async iterator to a Promise\r\nfunction toPromise(val) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (!isIterator(val))\r\n            return val;\r\n        let value;\r\n        let done = false;\r\n        let next = 'next';\r\n        do {\r\n            const state = val[next](value);\r\n            done = state.done;\r\n            value = state.value;\r\n            next = 'next';\r\n            try {\r\n                if (isIterator(value))\r\n                    value = toPromise(value);\r\n                if (isPromise(value))\r\n                    value = yield value;\r\n            }\r\n            catch (err) {\r\n                next = 'throw';\r\n                value = err;\r\n            }\r\n        } while (!done);\r\n        return value;\r\n    });\r\n}\r\n// convert an async iterator to a value in a synchronous manner\r\nfunction toValueSync(val) {\r\n    if (!isIterator(val))\r\n        return val;\r\n    let value;\r\n    let done = false;\r\n    let next = 'next';\r\n    do {\r\n        const state = val[next](value);\r\n        done = state.done;\r\n        value = state.value;\r\n        next = 'next';\r\n        if (isIterator(value)) {\r\n            try {\r\n                value = toValueSync(value);\r\n            }\r\n            catch (err) {\r\n                next = 'throw';\r\n                value = err;\r\n            }\r\n        }\r\n    } while (!done);\r\n    return value;\r\n}\n\nfunction toEnumerable(val) {\r\n    val = toValue(val);\r\n    if (isArray(val))\r\n        return val;\r\n    if (isString(val) && val.length > 0)\r\n        return [val];\r\n    if (isIterable(val))\r\n        return Array.from(val);\r\n    if (isObject(val))\r\n        return Object.keys(val).map((key) => [key, val[key]]);\r\n    return [];\r\n}\r\nfunction toArray(val) {\r\n    if (isNil(val))\r\n        return [];\r\n    if (isArray(val))\r\n        return val;\r\n    return [val];\r\n}\n\nconst rFormat = /%([-_0^#:]+)?(\\d+)?([EO])?(.)/;\r\nconst monthNames = [\r\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',\r\n    'September', 'October', 'November', 'December'\r\n];\r\nconst dayNames = [\r\n    'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\r\n];\r\nconst monthNamesShort = monthNames.map(abbr);\r\nconst dayNamesShort = dayNames.map(abbr);\r\nconst suffixes = {\r\n    1: 'st',\r\n    2: 'nd',\r\n    3: 'rd',\r\n    'default': 'th'\r\n};\r\nfunction abbr(str) {\r\n    return str.slice(0, 3);\r\n}\r\n// prototype extensions\r\nfunction daysInMonth(d) {\r\n    const feb = isLeapYear(d) ? 29 : 28;\r\n    return [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n}\r\nfunction getDayOfYear(d) {\r\n    let num = 0;\r\n    for (let i = 0; i < d.getMonth(); ++i) {\r\n        num += daysInMonth(d)[i];\r\n    }\r\n    return num + d.getDate();\r\n}\r\nfunction getWeekOfYear(d, startDay) {\r\n    // Skip to startDay of this week\r\n    const now = getDayOfYear(d) + (startDay - d.getDay());\r\n    // Find the first startDay of the year\r\n    const jan1 = new Date(d.getFullYear(), 0, 1);\r\n    const then = (7 - jan1.getDay() + startDay);\r\n    return String(Math.floor((now - then) / 7) + 1);\r\n}\r\nfunction isLeapYear(d) {\r\n    const year = d.getFullYear();\r\n    return !!((year & 3) === 0 && (year % 100 || (year % 400 === 0 && year)));\r\n}\r\nfunction getSuffix(d) {\r\n    const str = d.getDate().toString();\r\n    const index = parseInt(str.slice(-1));\r\n    return suffixes[index] || suffixes['default'];\r\n}\r\nfunction century(d) {\r\n    return parseInt(d.getFullYear().toString().substring(0, 2), 10);\r\n}\r\n// default to 0\r\nconst padWidths = {\r\n    d: 2,\r\n    e: 2,\r\n    H: 2,\r\n    I: 2,\r\n    j: 3,\r\n    k: 2,\r\n    l: 2,\r\n    L: 3,\r\n    m: 2,\r\n    M: 2,\r\n    S: 2,\r\n    U: 2,\r\n    W: 2\r\n};\r\n// default to '0'\r\nconst padChars = {\r\n    a: ' ',\r\n    A: ' ',\r\n    b: ' ',\r\n    B: ' ',\r\n    c: ' ',\r\n    e: ' ',\r\n    k: ' ',\r\n    l: ' ',\r\n    p: ' ',\r\n    P: ' '\r\n};\r\nconst formatCodes = {\r\n    a: (d) => dayNamesShort[d.getDay()],\r\n    A: (d) => dayNames[d.getDay()],\r\n    b: (d) => monthNamesShort[d.getMonth()],\r\n    B: (d) => monthNames[d.getMonth()],\r\n    c: (d) => d.toLocaleString(),\r\n    C: (d) => century(d),\r\n    d: (d) => d.getDate(),\r\n    e: (d) => d.getDate(),\r\n    H: (d) => d.getHours(),\r\n    I: (d) => String(d.getHours() % 12 || 12),\r\n    j: (d) => getDayOfYear(d),\r\n    k: (d) => d.getHours(),\r\n    l: (d) => String(d.getHours() % 12 || 12),\r\n    L: (d) => d.getMilliseconds(),\r\n    m: (d) => d.getMonth() + 1,\r\n    M: (d) => d.getMinutes(),\r\n    N: (d, opts) => {\r\n        const width = Number(opts.width) || 9;\r\n        const str = String(d.getMilliseconds()).slice(0, width);\r\n        return padEnd(str, width, '0');\r\n    },\r\n    p: (d) => (d.getHours() < 12 ? 'AM' : 'PM'),\r\n    P: (d) => (d.getHours() < 12 ? 'am' : 'pm'),\r\n    q: (d) => getSuffix(d),\r\n    s: (d) => Math.round(d.getTime() / 1000),\r\n    S: (d) => d.getSeconds(),\r\n    u: (d) => d.getDay() || 7,\r\n    U: (d) => getWeekOfYear(d, 0),\r\n    w: (d) => d.getDay(),\r\n    W: (d) => getWeekOfYear(d, 1),\r\n    x: (d) => d.toLocaleDateString(),\r\n    X: (d) => d.toLocaleTimeString(),\r\n    y: (d) => d.getFullYear().toString().slice(2, 4),\r\n    Y: (d) => d.getFullYear(),\r\n    z: (d, opts) => {\r\n        const nOffset = Math.abs(d.getTimezoneOffset());\r\n        const h = Math.floor(nOffset / 60);\r\n        const m = nOffset % 60;\r\n        return (d.getTimezoneOffset() > 0 ? '-' : '+') +\r\n            padStart(h, 2, '0') +\r\n            (opts.flags[':'] ? ':' : '') +\r\n            padStart(m, 2, '0');\r\n    },\r\n    't': () => '\\t',\r\n    'n': () => '\\n',\r\n    '%': () => '%'\r\n};\r\nformatCodes.h = formatCodes.b;\r\nfunction strftime(d, formatStr) {\r\n    let output = '';\r\n    let remaining = formatStr;\r\n    let match;\r\n    while ((match = rFormat.exec(remaining))) {\r\n        output += remaining.slice(0, match.index);\r\n        remaining = remaining.slice(match.index + match[0].length);\r\n        output += format(d, match);\r\n    }\r\n    return output + remaining;\r\n}\r\nfunction format(d, match) {\r\n    const [input, flagStr = '', width, modifier, conversion] = match;\r\n    const convert = formatCodes[conversion];\r\n    if (!convert)\r\n        return input;\r\n    const flags = {};\r\n    for (const flag of flagStr)\r\n        flags[flag] = true;\r\n    let ret = String(convert(d, { flags, width, modifier }));\r\n    let padChar = padChars[conversion] || '0';\r\n    let padWidth = width || padWidths[conversion] || 0;\r\n    if (flags['^'])\r\n        ret = ret.toUpperCase();\r\n    else if (flags['#'])\r\n        ret = changeCase(ret);\r\n    if (flags['_'])\r\n        padChar = ' ';\r\n    else if (flags['0'])\r\n        padChar = '0';\r\n    if (flags['-'])\r\n        padWidth = 0;\r\n    return padStart(ret, padWidth, padChar);\r\n}\n\n// one minute in milliseconds\r\nconst OneMinute = 60000;\r\nconst hostTimezoneOffset = new Date().getTimezoneOffset();\r\nconst ISO8601_TIMEZONE_PATTERN = /([zZ]|([+-])(\\d{2}):(\\d{2}))$/;\r\n/**\r\n * A date implementation with timezone info, just like Ruby date\r\n *\r\n * Implementation:\r\n * - create a Date offset by it's timezone difference, avoiding overriding a bunch of methods\r\n * - rewrite getTimezoneOffset() to trick strftime\r\n */\r\nclass TimezoneDate {\r\n    constructor(init, timezoneOffset) {\r\n        if (init instanceof TimezoneDate) {\r\n            this.date = init.date;\r\n            timezoneOffset = init.timezoneOffset;\r\n        }\r\n        else {\r\n            const diff = (hostTimezoneOffset - timezoneOffset) * OneMinute;\r\n            const time = new Date(init).getTime() + diff;\r\n            this.date = new Date(time);\r\n        }\r\n        this.timezoneOffset = timezoneOffset;\r\n    }\r\n    getTime() {\r\n        return this.date.getTime();\r\n    }\r\n    getMilliseconds() {\r\n        return this.date.getMilliseconds();\r\n    }\r\n    getSeconds() {\r\n        return this.date.getSeconds();\r\n    }\r\n    getMinutes() {\r\n        return this.date.getMinutes();\r\n    }\r\n    getHours() {\r\n        return this.date.getHours();\r\n    }\r\n    getDay() {\r\n        return this.date.getDay();\r\n    }\r\n    getDate() {\r\n        return this.date.getDate();\r\n    }\r\n    getMonth() {\r\n        return this.date.getMonth();\r\n    }\r\n    getFullYear() {\r\n        return this.date.getFullYear();\r\n    }\r\n    toLocaleTimeString(locale) {\r\n        return this.date.toLocaleTimeString(locale);\r\n    }\r\n    toLocaleDateString(locale) {\r\n        return this.date.toLocaleDateString(locale);\r\n    }\r\n    getTimezoneOffset() {\r\n        return this.timezoneOffset;\r\n    }\r\n    /**\r\n     * Create a Date object fixed to it's declared Timezone. Both\r\n     * - 2021-08-06T02:29:00.000Z and\r\n     * - 2021-08-06T02:29:00.000+08:00\r\n     * will always be displayed as\r\n     * - 2021-08-06 02:29:00\r\n     * regardless timezoneOffset in JavaScript realm\r\n     *\r\n     * The implementation hack:\r\n     * Instead of calling `.getMonth()`/`.getUTCMonth()` respect to `preserveTimezones`,\r\n     * we create a different Date to trick strftime, it's both simpler and more performant.\r\n     * Given that a template is expected to be parsed fewer times than rendered.\r\n     */\r\n    static createDateFixedToTimezone(dateString) {\r\n        const m = dateString.match(ISO8601_TIMEZONE_PATTERN);\r\n        // representing a UTC timestamp\r\n        if (m && m[1] === 'Z') {\r\n            return new TimezoneDate(+new Date(dateString), 0);\r\n        }\r\n        // has a timezone specified\r\n        if (m && m[2] && m[3] && m[4]) {\r\n            const [, , sign, hours, minutes] = m;\r\n            const delta = (sign === '+' ? -1 : 1) * (parseInt(hours, 10) * 60 + parseInt(minutes, 10));\r\n            return new TimezoneDate(+new Date(dateString), delta);\r\n        }\r\n        return new Date(dateString);\r\n    }\r\n}\n\nclass DelimitedToken extends Token {\r\n    constructor(kind, content, input, begin, end, trimLeft, trimRight, file) {\r\n        super(kind, input, begin, end, file);\r\n        this.trimLeft = false;\r\n        this.trimRight = false;\r\n        this.content = this.getText();\r\n        const tl = content[0] === '-';\r\n        const tr = last(content) === '-';\r\n        this.content = content\r\n            .slice(tl ? 1 : 0, tr ? -1 : content.length)\r\n            .trim();\r\n        this.trimLeft = tl || trimLeft;\r\n        this.trimRight = tr || trimRight;\r\n    }\r\n}\n\nclass TagToken extends DelimitedToken {\r\n    constructor(input, begin, end, options, file) {\r\n        const { trimTagLeft, trimTagRight, tagDelimiterLeft, tagDelimiterRight } = options;\r\n        const value = input.slice(begin + tagDelimiterLeft.length, end - tagDelimiterRight.length);\r\n        super(TokenKind.Tag, value, input, begin, end, trimTagLeft, trimTagRight, file);\r\n        const tokenizer = new Tokenizer(this.content, options.operators);\r\n        this.name = tokenizer.readTagName();\r\n        if (!this.name)\r\n            throw new TokenizationError(`illegal tag syntax`, this);\r\n        tokenizer.skipBlank();\r\n        this.args = tokenizer.remaining();\r\n    }\r\n}\n\nclass OutputToken extends DelimitedToken {\r\n    constructor(input, begin, end, options, file) {\r\n        const { trimOutputLeft, trimOutputRight, outputDelimiterLeft, outputDelimiterRight } = options;\r\n        const value = input.slice(begin + outputDelimiterLeft.length, end - outputDelimiterRight.length);\r\n        super(TokenKind.Output, value, input, begin, end, trimOutputLeft, trimOutputRight, file);\r\n    }\r\n}\n\nclass HTMLToken extends Token {\r\n    constructor(input, begin, end, file) {\r\n        super(TokenKind.HTML, input, begin, end, file);\r\n        this.input = input;\r\n        this.begin = begin;\r\n        this.end = end;\r\n        this.file = file;\r\n        this.trimLeft = 0;\r\n        this.trimRight = 0;\r\n    }\r\n    getContent() {\r\n        return this.input.slice(this.begin + this.trimLeft, this.end - this.trimRight);\r\n    }\r\n}\n\nclass NumberToken extends Token {\r\n    constructor(whole, decimal) {\r\n        super(TokenKind.Number, whole.input, whole.begin, decimal ? decimal.end : whole.end, whole.file);\r\n        this.whole = whole;\r\n        this.decimal = decimal;\r\n    }\r\n}\n\nclass IdentifierToken extends Token {\r\n    constructor(input, begin, end, file) {\r\n        super(TokenKind.Word, input, begin, end, file);\r\n        this.input = input;\r\n        this.begin = begin;\r\n        this.end = end;\r\n        this.file = file;\r\n        this.content = this.getText();\r\n    }\r\n    isNumber(allowSign = false) {\r\n        const begin = allowSign && TYPES[this.input.charCodeAt(this.begin)] & SIGN\r\n            ? this.begin + 1\r\n            : this.begin;\r\n        for (let i = begin; i < this.end; i++) {\r\n            if (!(TYPES[this.input.charCodeAt(i)] & NUMBER))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n}\n\nclass LiteralToken extends Token {\r\n    constructor(input, begin, end, file) {\r\n        super(TokenKind.Literal, input, begin, end, file);\r\n        this.input = input;\r\n        this.begin = begin;\r\n        this.end = end;\r\n        this.file = file;\r\n        this.literal = this.getText();\r\n    }\r\n}\n\nconst operatorPrecedences = {\r\n    '==': 2,\r\n    '!=': 2,\r\n    '>': 2,\r\n    '<': 2,\r\n    '>=': 2,\r\n    '<=': 2,\r\n    'contains': 2,\r\n    'not': 1,\r\n    'and': 0,\r\n    'or': 0\r\n};\r\nconst operatorTypes = {\r\n    '==': 0 /* OperatorType.Binary */,\r\n    '!=': 0 /* OperatorType.Binary */,\r\n    '>': 0 /* OperatorType.Binary */,\r\n    '<': 0 /* OperatorType.Binary */,\r\n    '>=': 0 /* OperatorType.Binary */,\r\n    '<=': 0 /* OperatorType.Binary */,\r\n    'contains': 0 /* OperatorType.Binary */,\r\n    'not': 1 /* OperatorType.Unary */,\r\n    'and': 0 /* OperatorType.Binary */,\r\n    'or': 0 /* OperatorType.Binary */\r\n};\r\nclass OperatorToken extends Token {\r\n    constructor(input, begin, end, file) {\r\n        super(TokenKind.Operator, input, begin, end, file);\r\n        this.input = input;\r\n        this.begin = begin;\r\n        this.end = end;\r\n        this.file = file;\r\n        this.operator = this.getText();\r\n    }\r\n    getPrecedence() {\r\n        const key = this.getText();\r\n        return key in operatorPrecedences ? operatorPrecedences[key] : 1;\r\n    }\r\n}\n\nclass PropertyAccessToken extends Token {\r\n    constructor(variable, props, end) {\r\n        super(TokenKind.PropertyAccess, variable.input, variable.begin, end, variable.file);\r\n        this.variable = variable;\r\n        this.props = props;\r\n        this.propertyName = this.variable instanceof IdentifierToken\r\n            ? this.variable.getText()\r\n            : parseStringLiteral(this.variable.getText());\r\n    }\r\n}\n\nclass FilterToken extends Token {\r\n    constructor(name, args, input, begin, end, file) {\r\n        super(TokenKind.Filter, input, begin, end, file);\r\n        this.name = name;\r\n        this.args = args;\r\n    }\r\n}\n\nclass HashToken extends Token {\r\n    constructor(input, begin, end, name, value, file) {\r\n        super(TokenKind.Hash, input, begin, end, file);\r\n        this.input = input;\r\n        this.begin = begin;\r\n        this.end = end;\r\n        this.name = name;\r\n        this.value = value;\r\n        this.file = file;\r\n    }\r\n}\n\nclass QuotedToken extends Token {\r\n    constructor(input, begin, end, file) {\r\n        super(TokenKind.Quoted, input, begin, end, file);\r\n        this.input = input;\r\n        this.begin = begin;\r\n        this.end = end;\r\n        this.file = file;\r\n    }\r\n}\n\nclass RangeToken extends Token {\r\n    constructor(input, begin, end, lhs, rhs, file) {\r\n        super(TokenKind.Range, input, begin, end, file);\r\n        this.input = input;\r\n        this.begin = begin;\r\n        this.end = end;\r\n        this.lhs = lhs;\r\n        this.rhs = rhs;\r\n        this.file = file;\r\n    }\r\n}\n\nclass LiquidTagToken extends DelimitedToken {\r\n    constructor(input, begin, end, options, file) {\r\n        const value = input.slice(begin, end);\r\n        super(TokenKind.Tag, value, input, begin, end, false, false, file);\r\n        if (!/\\S/.test(value)) {\r\n            // A line that contains only whitespace.\r\n            this.name = '';\r\n            this.args = '';\r\n        }\r\n        else {\r\n            const tokenizer = new Tokenizer(this.content, options.operators);\r\n            this.name = tokenizer.readTagName();\r\n            if (!this.name)\r\n                throw new TokenizationError(`illegal liquid tag syntax`, this);\r\n            tokenizer.skipBlank();\r\n            this.args = tokenizer.remaining();\r\n        }\r\n    }\r\n}\n\nclass SimpleEmitter {\r\n    constructor() {\r\n        this.buffer = '';\r\n    }\r\n    write(html) {\r\n        this.buffer += stringify(html);\r\n    }\r\n}\n\nclass StreamedEmitter {\r\n    constructor() {\r\n        this.buffer = '';\r\n        this.stream = null;\r\n        throw new Error('streaming not supported in browser');\r\n    }\r\n}\n\nclass KeepingTypeEmitter {\r\n    constructor() {\r\n        this.buffer = '';\r\n    }\r\n    write(html) {\r\n        html = toValue(html);\r\n        // This will only preserve the type if the value is isolated.\r\n        // I.E:\r\n        // {{ my-port }} -> 42\r\n        // {{ my-host }}:{{ my-port }} -> 'host:42'\r\n        if (typeof html !== 'string' && this.buffer === '') {\r\n            this.buffer = html;\r\n        }\r\n        else {\r\n            this.buffer = stringify(this.buffer) + stringify(html);\r\n        }\r\n    }\r\n}\n\nclass Render {\r\n    renderTemplatesToNodeStream(templates, ctx) {\r\n        const emitter = new StreamedEmitter();\r\n        Promise.resolve().then(() => toPromise(this.renderTemplates(templates, ctx, emitter)))\r\n            .then(() => emitter.end(), err => emitter.error(err));\r\n        return emitter.stream;\r\n    }\r\n    *renderTemplates(templates, ctx, emitter) {\r\n        if (!emitter) {\r\n            emitter = ctx.opts.keepOutputType ? new KeepingTypeEmitter() : new SimpleEmitter();\r\n        }\r\n        for (const tpl of templates) {\r\n            try {\r\n                // if tpl.render supports emitter, it'll return empty `html`\r\n                const html = yield tpl.render(ctx, emitter);\r\n                // if not, it'll return an `html`, write to the emitter for it\r\n                html && emitter.write(html);\r\n                if (emitter['break'] || emitter['continue'])\r\n                    break;\r\n            }\r\n            catch (e) {\r\n                const err = RenderError.is(e) ? e : new RenderError(e, tpl);\r\n                throw err;\r\n            }\r\n        }\r\n        return emitter.buffer;\r\n    }\r\n}\n\nclass Expression {\r\n    constructor(tokens) {\r\n        this.postfix = [...toPostfix(tokens)];\r\n    }\r\n    *evaluate(ctx, lenient) {\r\n        assert(ctx, 'unable to evaluate: context not defined');\r\n        const operands = [];\r\n        for (const token of this.postfix) {\r\n            if (isOperatorToken(token)) {\r\n                const r = operands.pop();\r\n                let result;\r\n                if (operatorTypes[token.operator] === 1 /* OperatorType.Unary */) {\r\n                    result = yield ctx.opts.operators[token.operator](r, ctx);\r\n                }\r\n                else {\r\n                    const l = operands.pop();\r\n                    result = yield ctx.opts.operators[token.operator](l, r, ctx);\r\n                }\r\n                operands.push(result);\r\n            }\r\n            else {\r\n                operands.push(yield evalToken(token, ctx, lenient && this.postfix.length === 1));\r\n            }\r\n        }\r\n        return operands[0];\r\n    }\r\n}\r\nfunction* evalToken(token, ctx, lenient = false) {\r\n    if (isPropertyAccessToken(token))\r\n        return yield evalPropertyAccessToken(token, ctx, lenient);\r\n    if (isRangeToken(token))\r\n        return yield evalRangeToken(token, ctx);\r\n    if (isLiteralToken(token))\r\n        return evalLiteralToken(token);\r\n    if (isNumberToken(token))\r\n        return evalNumberToken(token);\r\n    if (isWordToken(token))\r\n        return token.getText();\r\n    if (isQuotedToken(token))\r\n        return evalQuotedToken(token);\r\n}\r\nfunction* evalPropertyAccessToken(token, ctx, lenient) {\r\n    const props = [];\r\n    for (const prop of token.props) {\r\n        props.push((yield evalToken(prop, ctx, false)));\r\n    }\r\n    try {\r\n        return yield ctx._get([token.propertyName, ...props]);\r\n    }\r\n    catch (e) {\r\n        if (lenient && e.name === 'InternalUndefinedVariableError')\r\n            return null;\r\n        throw (new UndefinedVariableError(e, token));\r\n    }\r\n}\r\nfunction evalNumberToken(token) {\r\n    const str = token.whole.content + '.' + (token.decimal ? token.decimal.content : '');\r\n    return Number(str);\r\n}\r\nfunction evalQuotedToken(token) {\r\n    return parseStringLiteral(token.getText());\r\n}\r\nfunction evalLiteralToken(token) {\r\n    return literalValues[token.literal];\r\n}\r\nfunction* evalRangeToken(token, ctx) {\r\n    const low = yield evalToken(token.lhs, ctx);\r\n    const high = yield evalToken(token.rhs, ctx);\r\n    return range(+low, +high + 1);\r\n}\r\nfunction* toPostfix(tokens) {\r\n    const ops = [];\r\n    for (const token of tokens) {\r\n        if (isOperatorToken(token)) {\r\n            while (ops.length && ops[ops.length - 1].getPrecedence() > token.getPrecedence()) {\r\n                yield ops.pop();\r\n            }\r\n            ops.push(token);\r\n        }\r\n        else\r\n            yield token;\r\n    }\r\n    while (ops.length) {\r\n        yield ops.pop();\r\n    }\r\n}\n\nfunction isTruthy(val, ctx) {\r\n    return !isFalsy(val, ctx);\r\n}\r\nfunction isFalsy(val, ctx) {\r\n    if (ctx.opts.jsTruthy) {\r\n        return !val;\r\n    }\r\n    else {\r\n        return val === false || undefined === val || val === null;\r\n    }\r\n}\n\nconst defaultOperators = {\r\n    '==': equal,\r\n    '!=': (l, r) => !equal(l, r),\r\n    '>': (l, r) => {\r\n        if (isComparable(l))\r\n            return l.gt(r);\r\n        if (isComparable(r))\r\n            return r.lt(l);\r\n        return toValue(l) > toValue(r);\r\n    },\r\n    '<': (l, r) => {\r\n        if (isComparable(l))\r\n            return l.lt(r);\r\n        if (isComparable(r))\r\n            return r.gt(l);\r\n        return toValue(l) < toValue(r);\r\n    },\r\n    '>=': (l, r) => {\r\n        if (isComparable(l))\r\n            return l.geq(r);\r\n        if (isComparable(r))\r\n            return r.leq(l);\r\n        return toValue(l) >= toValue(r);\r\n    },\r\n    '<=': (l, r) => {\r\n        if (isComparable(l))\r\n            return l.leq(r);\r\n        if (isComparable(r))\r\n            return r.geq(l);\r\n        return toValue(l) <= toValue(r);\r\n    },\r\n    'contains': (l, r) => {\r\n        l = toValue(l);\r\n        r = toValue(r);\r\n        return l && isFunction(l.indexOf) ? l.indexOf(r) > -1 : false;\r\n    },\r\n    'not': (v, ctx) => isFalsy(toValue(v), ctx),\r\n    'and': (l, r, ctx) => isTruthy(toValue(l), ctx) && isTruthy(toValue(r), ctx),\r\n    'or': (l, r, ctx) => isTruthy(toValue(l), ctx) || isTruthy(toValue(r), ctx)\r\n};\r\nfunction equal(lhs, rhs) {\r\n    if (isComparable(lhs))\r\n        return lhs.equals(rhs);\r\n    if (isComparable(rhs))\r\n        return rhs.equals(lhs);\r\n    lhs = toValue(lhs);\r\n    rhs = toValue(rhs);\r\n    if (isArray(lhs)) {\r\n        return isArray(rhs) && arrayEqual(lhs, rhs);\r\n    }\r\n    return lhs === rhs;\r\n}\r\nfunction arrayEqual(lhs, rhs) {\r\n    if (lhs.length !== rhs.length)\r\n        return false;\r\n    return !lhs.some((value, i) => !equal(value, rhs[i]));\r\n}\n\nclass Node {\r\n    constructor(key, value, next, prev) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.next = next;\r\n        this.prev = prev;\r\n    }\r\n}\r\nclass LRU {\r\n    constructor(limit, size = 0) {\r\n        this.limit = limit;\r\n        this.size = size;\r\n        this.cache = {};\r\n        this.head = new Node('HEAD', null, null, null);\r\n        this.tail = new Node('TAIL', null, null, null);\r\n        this.head.next = this.tail;\r\n        this.tail.prev = this.head;\r\n    }\r\n    write(key, value) {\r\n        if (this.cache[key]) {\r\n            this.cache[key].value = value;\r\n        }\r\n        else {\r\n            const node = new Node(key, value, this.head.next, this.head);\r\n            this.head.next.prev = node;\r\n            this.head.next = node;\r\n            this.cache[key] = node;\r\n            this.size++;\r\n            this.ensureLimit();\r\n        }\r\n    }\r\n    read(key) {\r\n        if (!this.cache[key])\r\n            return;\r\n        const { value } = this.cache[key];\r\n        this.remove(key);\r\n        this.write(key, value);\r\n        return value;\r\n    }\r\n    remove(key) {\r\n        const node = this.cache[key];\r\n        node.prev.next = node.next;\r\n        node.next.prev = node.prev;\r\n        delete this.cache[key];\r\n        this.size--;\r\n    }\r\n    clear() {\r\n        this.head.next = this.tail;\r\n        this.tail.prev = this.head;\r\n        this.size = 0;\r\n        this.cache = {};\r\n    }\r\n    ensureLimit() {\r\n        if (this.size > this.limit)\r\n            this.remove(this.tail.prev.key);\r\n    }\r\n}\n\nfunction domResolve(root, path) {\r\n    const base = document.createElement('base');\r\n    base.href = root;\r\n    const head = document.getElementsByTagName('head')[0];\r\n    head.insertBefore(base, head.firstChild);\r\n    const a = document.createElement('a');\r\n    a.href = path;\r\n    const resolved = a.href;\r\n    head.removeChild(base);\r\n    return resolved;\r\n}\r\nfunction resolve(root, filepath, ext) {\r\n    if (root.length && last(root) !== '/')\r\n        root += '/';\r\n    const url = domResolve(root, filepath);\r\n    return url.replace(/^(\\w+:\\/\\/[^/]+)(\\/[^?]+)/, (str, origin, path) => {\r\n        const last = path.split('/').pop();\r\n        if (/\\.\\w+$/.test(last))\r\n            return str;\r\n        return origin + path + ext;\r\n    });\r\n}\r\nfunction readFile(url) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return new Promise((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onload = () => {\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(xhr.responseText);\r\n                }\r\n                else {\r\n                    reject(new Error(xhr.statusText));\r\n                }\r\n            };\r\n            xhr.onerror = () => {\r\n                reject(new Error('An error occurred whilst receiving the response.'));\r\n            };\r\n            xhr.open('GET', url);\r\n            xhr.send();\r\n        });\r\n    });\r\n}\r\nfunction readFileSync(url) {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open('GET', url, false);\r\n    xhr.send();\r\n    if (xhr.status < 200 || xhr.status >= 300) {\r\n        throw new Error(xhr.statusText);\r\n    }\r\n    return xhr.responseText;\r\n}\r\nfunction exists(filepath) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return true;\r\n    });\r\n}\r\nfunction existsSync(filepath) {\r\n    return true;\r\n}\r\nfunction dirname(filepath) {\r\n    return domResolve(filepath, '.');\r\n}\r\nconst sep = '/';\n\nvar fs = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  resolve: resolve,\n  readFile: readFile,\n  readFileSync: readFileSync,\n  exists: exists,\n  existsSync: existsSync,\n  dirname: dirname,\n  sep: sep\n});\n\nfunction Default(value, defaultValue, ...args) {\r\n    value = toValue(value);\r\n    if (isArray(value) || isString(value))\r\n        return value.length ? value : defaultValue;\r\n    if (value === false && (new Map(args)).get('allow_false'))\r\n        return false;\r\n    return isFalsy(value, this.context) ? defaultValue : value;\r\n}\r\nfunction json(value, space = 0) {\r\n    return JSON.stringify(value, null, space);\r\n}\r\nconst raw = {\r\n    raw: true,\r\n    handler: identify\r\n};\n\nconst escapeMap = {\r\n    '&': '&amp;',\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '\"': '&#34;',\r\n    \"'\": '&#39;'\r\n};\r\nconst unescapeMap = {\r\n    '&amp;': '&',\r\n    '&lt;': '<',\r\n    '&gt;': '>',\r\n    '&#34;': '\"',\r\n    '&#39;': \"'\"\r\n};\r\nfunction escape(str) {\r\n    return stringify(str).replace(/&|<|>|\"|'/g, m => escapeMap[m]);\r\n}\r\nfunction unescape(str) {\r\n    return stringify(str).replace(/&(amp|lt|gt|#34|#39);/g, m => unescapeMap[m]);\r\n}\r\nfunction escape_once(str) {\r\n    return escape(unescape(stringify(str)));\r\n}\r\nfunction newline_to_br(v) {\r\n    return stringify(v).replace(/\\n/g, '<br />\\n');\r\n}\r\nfunction strip_html(v) {\r\n    return stringify(v).replace(/<script[\\s\\S]*?<\\/script>|<style[\\s\\S]*?<\\/style>|<.*?>|<!--[\\s\\S]*?-->/g, '');\r\n}\n\nvar htmlFilters = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  escape: escape,\n  escape_once: escape_once,\n  newline_to_br: newline_to_br,\n  strip_html: strip_html\n});\n\nconst defaultOptions = {\r\n    root: ['.'],\r\n    layouts: ['.'],\r\n    partials: ['.'],\r\n    relativeReference: true,\r\n    jekyllInclude: false,\r\n    cache: undefined,\r\n    extname: '',\r\n    fs: fs,\r\n    dynamicPartials: true,\r\n    jsTruthy: false,\r\n    dateFormat: '%A, %B %-e, %Y at %-l:%M %P %z',\r\n    trimTagRight: false,\r\n    trimTagLeft: false,\r\n    trimOutputRight: false,\r\n    trimOutputLeft: false,\r\n    greedy: true,\r\n    tagDelimiterLeft: '{%',\r\n    tagDelimiterRight: '%}',\r\n    outputDelimiterLeft: '{{',\r\n    outputDelimiterRight: '}}',\r\n    preserveTimezones: false,\r\n    strictFilters: false,\r\n    strictVariables: false,\r\n    ownPropertyOnly: true,\r\n    lenientIf: false,\r\n    globals: {},\r\n    keepOutputType: false,\r\n    operators: defaultOperators\r\n};\r\nfunction normalize(options) {\r\n    if (options.hasOwnProperty('root')) {\r\n        if (!options.hasOwnProperty('partials'))\r\n            options.partials = options.root;\r\n        if (!options.hasOwnProperty('layouts'))\r\n            options.layouts = options.root;\r\n    }\r\n    if (options.hasOwnProperty('cache')) {\r\n        let cache;\r\n        if (typeof options.cache === 'number')\r\n            cache = options.cache > 0 ? new LRU(options.cache) : undefined;\r\n        else if (typeof options.cache === 'object')\r\n            cache = options.cache;\r\n        else\r\n            cache = options.cache ? new LRU(1024) : undefined;\r\n        options.cache = cache;\r\n    }\r\n    options = Object.assign(Object.assign(Object.assign({}, defaultOptions), (options.jekyllInclude ? { dynamicPartials: false } : {})), options);\r\n    if ((!options.fs.dirname || !options.fs.sep) && options.relativeReference) {\r\n        console.warn('[LiquidJS] `fs.dirname` and `fs.sep` are required for relativeReference, set relativeReference to `false` to suppress this warning');\r\n        options.relativeReference = false;\r\n    }\r\n    options.root = normalizeDirectoryList(options.root);\r\n    options.partials = normalizeDirectoryList(options.partials);\r\n    options.layouts = normalizeDirectoryList(options.layouts);\r\n    options.outputEscape = options.outputEscape && getOutputEscapeFunction(options.outputEscape);\r\n    return options;\r\n}\r\nfunction getOutputEscapeFunction(nameOrFunction) {\r\n    if (nameOrFunction === 'escape')\r\n        return escape;\r\n    if (nameOrFunction === 'json')\r\n        return json;\r\n    assert(isFunction(nameOrFunction), '`outputEscape` need to be of type string or function');\r\n    return nameOrFunction;\r\n}\r\nfunction normalizeDirectoryList(value) {\r\n    let list = [];\r\n    if (isArray(value))\r\n        list = value;\r\n    if (isString(value))\r\n        list = [value];\r\n    return list;\r\n}\n\nfunction matchOperator(str, begin, trie, end = str.length) {\r\n    let node = trie;\r\n    let i = begin;\r\n    let info;\r\n    while (node[str[i]] && i < end) {\r\n        node = node[str[i++]];\r\n        if (node['end'])\r\n            info = node;\r\n    }\r\n    if (!info)\r\n        return -1;\r\n    if (info['needBoundary'] && (TYPES[str.charCodeAt(i)] & IDENTIFIER))\r\n        return -1;\r\n    return i;\r\n}\n\nfunction whiteSpaceCtrl(tokens, options) {\r\n    let inRaw = false;\r\n    for (let i = 0; i < tokens.length; i++) {\r\n        const token = tokens[i];\r\n        if (!isDelimitedToken(token))\r\n            continue;\r\n        if (!inRaw && token.trimLeft) {\r\n            trimLeft(tokens[i - 1], options.greedy);\r\n        }\r\n        if (isTagToken(token)) {\r\n            if (token.name === 'raw')\r\n                inRaw = true;\r\n            else if (token.name === 'endraw')\r\n                inRaw = false;\r\n        }\r\n        if (!inRaw && token.trimRight) {\r\n            trimRight(tokens[i + 1], options.greedy);\r\n        }\r\n    }\r\n}\r\nfunction trimLeft(token, greedy) {\r\n    if (!token || !isHTMLToken(token))\r\n        return;\r\n    const mask = greedy ? BLANK : INLINE_BLANK;\r\n    while (TYPES[token.input.charCodeAt(token.end - 1 - token.trimRight)] & mask)\r\n        token.trimRight++;\r\n}\r\nfunction trimRight(token, greedy) {\r\n    if (!token || !isHTMLToken(token))\r\n        return;\r\n    const mask = greedy ? BLANK : INLINE_BLANK;\r\n    while (TYPES[token.input.charCodeAt(token.begin + token.trimLeft)] & mask)\r\n        token.trimLeft++;\r\n    if (token.input.charAt(token.begin + token.trimLeft) === '\\n')\r\n        token.trimLeft++;\r\n}\n\nclass Tokenizer {\r\n    constructor(input, operators = defaultOptions.operators, file) {\r\n        this.input = input;\r\n        this.file = file;\r\n        this.p = 0;\r\n        this.rawBeginAt = -1;\r\n        this.N = input.length;\r\n        this.opTrie = createTrie(operators);\r\n    }\r\n    readExpression() {\r\n        return new Expression(this.readExpressionTokens());\r\n    }\r\n    *readExpressionTokens() {\r\n        while (this.p < this.N) {\r\n            const operator = this.readOperator();\r\n            if (operator) {\r\n                yield operator;\r\n                continue;\r\n            }\r\n            const operand = this.readValue();\r\n            if (operand) {\r\n                yield operand;\r\n                continue;\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    readOperator() {\r\n        this.skipBlank();\r\n        const end = matchOperator(this.input, this.p, this.opTrie);\r\n        if (end === -1)\r\n            return;\r\n        return new OperatorToken(this.input, this.p, (this.p = end), this.file);\r\n    }\r\n    readFilters() {\r\n        const filters = [];\r\n        while (true) {\r\n            const filter = this.readFilter();\r\n            if (!filter)\r\n                return filters;\r\n            filters.push(filter);\r\n        }\r\n    }\r\n    readFilter() {\r\n        this.skipBlank();\r\n        if (this.end())\r\n            return null;\r\n        assert(this.peek() === '|', () => `unexpected token at ${this.snapshot()}`);\r\n        this.p++;\r\n        const begin = this.p;\r\n        const name = this.readIdentifier();\r\n        if (!name.size())\r\n            return null;\r\n        const args = [];\r\n        this.skipBlank();\r\n        if (this.peek() === ':') {\r\n            do {\r\n                ++this.p;\r\n                const arg = this.readFilterArg();\r\n                arg && args.push(arg);\r\n                this.skipBlank();\r\n                assert(this.end() || this.peek() === ',' || this.peek() === '|', () => `unexpected character ${this.snapshot()}`);\r\n            } while (this.peek() === ',');\r\n        }\r\n        return new FilterToken(name.getText(), args, this.input, begin, this.p, this.file);\r\n    }\r\n    readFilterArg() {\r\n        const key = this.readValue();\r\n        if (!key)\r\n            return;\r\n        this.skipBlank();\r\n        if (this.peek() !== ':')\r\n            return key;\r\n        ++this.p;\r\n        const value = this.readValue();\r\n        return [key.getText(), value];\r\n    }\r\n    readTopLevelTokens(options = defaultOptions) {\r\n        const tokens = [];\r\n        while (this.p < this.N) {\r\n            const token = this.readTopLevelToken(options);\r\n            tokens.push(token);\r\n        }\r\n        whiteSpaceCtrl(tokens, options);\r\n        return tokens;\r\n    }\r\n    readTopLevelToken(options) {\r\n        const { tagDelimiterLeft, outputDelimiterLeft } = options;\r\n        if (this.rawBeginAt > -1)\r\n            return this.readEndrawOrRawContent(options);\r\n        if (this.match(tagDelimiterLeft))\r\n            return this.readTagToken(options);\r\n        if (this.match(outputDelimiterLeft))\r\n            return this.readOutputToken(options);\r\n        return this.readHTMLToken([tagDelimiterLeft, outputDelimiterLeft]);\r\n    }\r\n    readHTMLToken(stopStrings) {\r\n        const begin = this.p;\r\n        while (this.p < this.N) {\r\n            if (stopStrings.some(str => this.match(str)))\r\n                break;\r\n            ++this.p;\r\n        }\r\n        return new HTMLToken(this.input, begin, this.p, this.file);\r\n    }\r\n    readTagToken(options = defaultOptions) {\r\n        const { file, input } = this;\r\n        const begin = this.p;\r\n        if (this.readToDelimiter(options.tagDelimiterRight) === -1) {\r\n            throw this.mkError(`tag ${this.snapshot(begin)} not closed`, begin);\r\n        }\r\n        const token = new TagToken(input, begin, this.p, options, file);\r\n        if (token.name === 'raw')\r\n            this.rawBeginAt = begin;\r\n        return token;\r\n    }\r\n    readToDelimiter(delimiter) {\r\n        while (this.p < this.N) {\r\n            if ((this.peekType() & QUOTE)) {\r\n                this.readQuoted();\r\n                continue;\r\n            }\r\n            ++this.p;\r\n            if (this.rmatch(delimiter))\r\n                return this.p;\r\n        }\r\n        return -1;\r\n    }\r\n    readOutputToken(options = defaultOptions) {\r\n        const { file, input } = this;\r\n        const { outputDelimiterRight } = options;\r\n        const begin = this.p;\r\n        if (this.readToDelimiter(outputDelimiterRight) === -1) {\r\n            throw this.mkError(`output ${this.snapshot(begin)} not closed`, begin);\r\n        }\r\n        return new OutputToken(input, begin, this.p, options, file);\r\n    }\r\n    readEndrawOrRawContent(options) {\r\n        const { tagDelimiterLeft, tagDelimiterRight } = options;\r\n        const begin = this.p;\r\n        let leftPos = this.readTo(tagDelimiterLeft) - tagDelimiterLeft.length;\r\n        while (this.p < this.N) {\r\n            if (this.readIdentifier().getText() !== 'endraw') {\r\n                leftPos = this.readTo(tagDelimiterLeft) - tagDelimiterLeft.length;\r\n                continue;\r\n            }\r\n            while (this.p <= this.N) {\r\n                if (this.rmatch(tagDelimiterRight)) {\r\n                    const end = this.p;\r\n                    if (begin === leftPos) {\r\n                        this.rawBeginAt = -1;\r\n                        return new TagToken(this.input, begin, end, options, this.file);\r\n                    }\r\n                    else {\r\n                        this.p = leftPos;\r\n                        return new HTMLToken(this.input, begin, leftPos, this.file);\r\n                    }\r\n                }\r\n                if (this.rmatch(tagDelimiterLeft))\r\n                    break;\r\n                this.p++;\r\n            }\r\n        }\r\n        throw this.mkError(`raw ${this.snapshot(this.rawBeginAt)} not closed`, begin);\r\n    }\r\n    readLiquidTagTokens(options = defaultOptions) {\r\n        const tokens = [];\r\n        while (this.p < this.N) {\r\n            const token = this.readLiquidTagToken(options);\r\n            if (token.name)\r\n                tokens.push(token);\r\n        }\r\n        return tokens;\r\n    }\r\n    readLiquidTagToken(options) {\r\n        const { file, input } = this;\r\n        const begin = this.p;\r\n        let end = this.N;\r\n        if (this.readToDelimiter('\\n') !== -1)\r\n            end = this.p;\r\n        return new LiquidTagToken(input, begin, end, options, file);\r\n    }\r\n    mkError(msg, begin) {\r\n        return new TokenizationError(msg, new IdentifierToken(this.input, begin, this.N, this.file));\r\n    }\r\n    snapshot(begin = this.p) {\r\n        return JSON.stringify(ellipsis(this.input.slice(begin), 16));\r\n    }\r\n    /**\r\n     * @deprecated use #readIdentifier instead\r\n     */\r\n    readWord() {\r\n        return this.readIdentifier();\r\n    }\r\n    readIdentifier() {\r\n        this.skipBlank();\r\n        const begin = this.p;\r\n        while (this.peekType() & IDENTIFIER)\r\n            ++this.p;\r\n        return new IdentifierToken(this.input, begin, this.p, this.file);\r\n    }\r\n    readTagName() {\r\n        this.skipBlank();\r\n        // Handle inline comment tags\r\n        if (this.input[this.p] === '#')\r\n            return this.input.slice(this.p, ++this.p);\r\n        return this.readIdentifier().getText();\r\n    }\r\n    readHashes(jekyllStyle) {\r\n        const hashes = [];\r\n        while (true) {\r\n            const hash = this.readHash(jekyllStyle);\r\n            if (!hash)\r\n                return hashes;\r\n            hashes.push(hash);\r\n        }\r\n    }\r\n    readHash(jekyllStyle) {\r\n        this.skipBlank();\r\n        if (this.peek() === ',')\r\n            ++this.p;\r\n        const begin = this.p;\r\n        const name = this.readIdentifier();\r\n        if (!name.size())\r\n            return;\r\n        let value;\r\n        this.skipBlank();\r\n        const sep = jekyllStyle ? '=' : ':';\r\n        if (this.peek() === sep) {\r\n            ++this.p;\r\n            value = this.readValue();\r\n        }\r\n        return new HashToken(this.input, begin, this.p, name, value, this.file);\r\n    }\r\n    remaining() {\r\n        return this.input.slice(this.p);\r\n    }\r\n    advance(i = 1) {\r\n        this.p += i;\r\n    }\r\n    end() {\r\n        return this.p >= this.N;\r\n    }\r\n    readTo(end) {\r\n        while (this.p < this.N) {\r\n            ++this.p;\r\n            if (this.rmatch(end))\r\n                return this.p;\r\n        }\r\n        return -1;\r\n    }\r\n    readValue() {\r\n        const value = this.readQuoted() || this.readRange();\r\n        if (value)\r\n            return value;\r\n        if (this.peek() === '[') {\r\n            this.p++;\r\n            const prop = this.readQuoted();\r\n            if (!prop)\r\n                return;\r\n            if (this.peek() !== ']')\r\n                return;\r\n            this.p++;\r\n            return new PropertyAccessToken(prop, [], this.p);\r\n        }\r\n        const variable = this.readIdentifier();\r\n        if (!variable.size())\r\n            return;\r\n        let isNumber = variable.isNumber(true);\r\n        const props = [];\r\n        while (true) {\r\n            if (this.peek() === '[') {\r\n                isNumber = false;\r\n                this.p++;\r\n                const prop = this.readValue() || new IdentifierToken(this.input, this.p, this.p, this.file);\r\n                this.readTo(']');\r\n                props.push(prop);\r\n            }\r\n            else if (this.peek() === '.' && this.peek(1) !== '.') { // skip range syntax\r\n                this.p++;\r\n                const prop = this.readIdentifier();\r\n                if (!prop.size())\r\n                    break;\r\n                if (!prop.isNumber())\r\n                    isNumber = false;\r\n                props.push(prop);\r\n            }\r\n            else\r\n                break;\r\n        }\r\n        if (!props.length && literalValues.hasOwnProperty(variable.content)) {\r\n            return new LiteralToken(this.input, variable.begin, variable.end, this.file);\r\n        }\r\n        if (isNumber)\r\n            return new NumberToken(variable, props[0]);\r\n        return new PropertyAccessToken(variable, props, this.p);\r\n    }\r\n    readRange() {\r\n        this.skipBlank();\r\n        const begin = this.p;\r\n        if (this.peek() !== '(')\r\n            return;\r\n        ++this.p;\r\n        const lhs = this.readValueOrThrow();\r\n        this.p += 2;\r\n        const rhs = this.readValueOrThrow();\r\n        ++this.p;\r\n        return new RangeToken(this.input, begin, this.p, lhs, rhs, this.file);\r\n    }\r\n    readValueOrThrow() {\r\n        const value = this.readValue();\r\n        assert(value, () => `unexpected token ${this.snapshot()}, value expected`);\r\n        return value;\r\n    }\r\n    readQuoted() {\r\n        this.skipBlank();\r\n        const begin = this.p;\r\n        if (!(this.peekType() & QUOTE))\r\n            return;\r\n        ++this.p;\r\n        let escaped = false;\r\n        while (this.p < this.N) {\r\n            ++this.p;\r\n            if (this.input[this.p - 1] === this.input[begin] && !escaped)\r\n                break;\r\n            if (escaped)\r\n                escaped = false;\r\n            else if (this.input[this.p - 1] === '\\\\')\r\n                escaped = true;\r\n        }\r\n        return new QuotedToken(this.input, begin, this.p, this.file);\r\n    }\r\n    *readFileNameTemplate(options) {\r\n        const { outputDelimiterLeft } = options;\r\n        const htmlStopStrings = [',', ' ', outputDelimiterLeft];\r\n        const htmlStopStringSet = new Set(htmlStopStrings);\r\n        // break on ',' and ' ', outputDelimiterLeft only stops HTML token\r\n        while (this.p < this.N && !htmlStopStringSet.has(this.peek())) {\r\n            yield this.match(outputDelimiterLeft)\r\n                ? this.readOutputToken(options)\r\n                : this.readHTMLToken(htmlStopStrings);\r\n        }\r\n    }\r\n    match(word) {\r\n        for (let i = 0; i < word.length; i++) {\r\n            if (word[i] !== this.input[this.p + i])\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    rmatch(pattern) {\r\n        for (let i = 0; i < pattern.length; i++) {\r\n            if (pattern[pattern.length - 1 - i] !== this.input[this.p - 1 - i])\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    peekType(n = 0) {\r\n        return TYPES[this.input.charCodeAt(this.p + n)];\r\n    }\r\n    peek(n = 0) {\r\n        return this.input[this.p + n];\r\n    }\r\n    skipBlank() {\r\n        while (this.peekType() & BLANK)\r\n            ++this.p;\r\n    }\r\n}\n\nclass ParseStream {\r\n    constructor(tokens, parseToken) {\r\n        this.handlers = {};\r\n        this.stopRequested = false;\r\n        this.tokens = tokens;\r\n        this.parseToken = parseToken;\r\n    }\r\n    on(name, cb) {\r\n        this.handlers[name] = cb;\r\n        return this;\r\n    }\r\n    trigger(event, arg) {\r\n        const h = this.handlers[event];\r\n        return h ? (h.call(this, arg), true) : false;\r\n    }\r\n    start() {\r\n        this.trigger('start');\r\n        let token;\r\n        while (!this.stopRequested && (token = this.tokens.shift())) {\r\n            if (this.trigger('token', token))\r\n                continue;\r\n            if (isTagToken(token) && this.trigger(`tag:${token.name}`, token)) {\r\n                continue;\r\n            }\r\n            const template = this.parseToken(token, this.tokens);\r\n            this.trigger('template', template);\r\n        }\r\n        if (!this.stopRequested)\r\n            this.trigger('end');\r\n        return this;\r\n    }\r\n    stop() {\r\n        this.stopRequested = true;\r\n        return this;\r\n    }\r\n}\n\nclass TemplateImpl {\r\n    constructor(token) {\r\n        this.token = token;\r\n    }\r\n}\n\nclass Tag extends TemplateImpl {\r\n    constructor(token, remainTokens, liquid) {\r\n        super(token);\r\n        this.name = token.name;\r\n        this.liquid = liquid;\r\n    }\r\n}\n\n/**\r\n * Key-Value Pairs Representing Tag Arguments\r\n * Example:\r\n *    For the markup `, foo:'bar', coo:2 reversed %}`,\r\n *    hash['foo'] === 'bar'\r\n *    hash['coo'] === 2\r\n *    hash['reversed'] === undefined\r\n */\r\nclass Hash {\r\n    constructor(markup, jekyllStyle) {\r\n        this.hash = {};\r\n        const tokenizer = new Tokenizer(markup, {});\r\n        for (const hash of tokenizer.readHashes(jekyllStyle)) {\r\n            this.hash[hash.name.content] = hash.value;\r\n        }\r\n    }\r\n    *render(ctx) {\r\n        const hash = {};\r\n        for (const key of Object.keys(this.hash)) {\r\n            hash[key] = this.hash[key] === undefined ? true : yield evalToken(this.hash[key], ctx);\r\n        }\r\n        return hash;\r\n    }\r\n}\n\nfunction createTagClass(options) {\r\n    return class extends Tag {\r\n        constructor(token, tokens, liquid) {\r\n            super(token, tokens, liquid);\r\n            if (isFunction(options.parse)) {\r\n                options.parse.call(this, token, tokens);\r\n            }\r\n        }\r\n        *render(ctx, emitter) {\r\n            const hash = (yield new Hash(this.token.args).render(ctx));\r\n            return yield options.render.call(this, ctx, emitter, hash);\r\n        }\r\n    };\r\n}\n\nfunction isKeyValuePair(arr) {\r\n    return isArray(arr);\r\n}\n\nclass Filter {\r\n    constructor(name, options, args, liquid) {\r\n        this.name = name;\r\n        this.handler = isFunction(options)\r\n            ? options\r\n            : (isFunction(options === null || options === void 0 ? void 0 : options.handler) ? options.handler : identify);\r\n        this.raw = !isFunction(options) && !!(options === null || options === void 0 ? void 0 : options.raw);\r\n        this.args = args;\r\n        this.liquid = liquid;\r\n    }\r\n    *render(value, context) {\r\n        const argv = [];\r\n        for (const arg of this.args) {\r\n            if (isKeyValuePair(arg))\r\n                argv.push([arg[0], yield evalToken(arg[1], context)]);\r\n            else\r\n                argv.push(yield evalToken(arg, context));\r\n        }\r\n        return this.handler.apply({ context, liquid: this.liquid }, [value, ...argv]);\r\n    }\r\n}\n\nclass Value {\r\n    /**\r\n     * @param str the value to be valuated, eg.: \"foobar\" | truncate: 3\r\n     */\r\n    constructor(str, liquid) {\r\n        this.filters = [];\r\n        const tokenizer = new Tokenizer(str, liquid.options.operators);\r\n        this.initial = tokenizer.readExpression();\r\n        this.filters = tokenizer.readFilters().map(({ name, args }) => new Filter(name, this.getFilter(liquid, name), args, liquid));\r\n    }\r\n    *value(ctx, lenient) {\r\n        lenient = lenient || (ctx.opts.lenientIf && this.filters.length > 0 && this.filters[0].name === 'default');\r\n        let val = yield this.initial.evaluate(ctx, lenient);\r\n        for (const filter of this.filters) {\r\n            val = yield filter.render(val, ctx);\r\n        }\r\n        return val;\r\n    }\r\n    getFilter(liquid, name) {\r\n        const impl = liquid.filters[name];\r\n        assert(impl || !liquid.options.strictFilters, () => `undefined filter: ${name}`);\r\n        return impl;\r\n    }\r\n}\n\nclass Output extends TemplateImpl {\r\n    constructor(token, liquid) {\r\n        var _a;\r\n        super(token);\r\n        this.value = new Value(token.content, liquid);\r\n        const filters = this.value.filters;\r\n        const outputEscape = liquid.options.outputEscape;\r\n        if (!((_a = filters[filters.length - 1]) === null || _a === void 0 ? void 0 : _a.raw) && outputEscape) {\r\n            filters.push(new Filter(toString.call(outputEscape), outputEscape, [], liquid));\r\n        }\r\n    }\r\n    *render(ctx, emitter) {\r\n        const val = yield this.value.value(ctx, false);\r\n        emitter.write(val);\r\n    }\r\n}\n\nclass HTML extends TemplateImpl {\r\n    constructor(token) {\r\n        super(token);\r\n        this.str = token.getContent();\r\n    }\r\n    *render(ctx, emitter) {\r\n        emitter.write(this.str);\r\n    }\r\n}\n\nvar LookupType;\r\n(function (LookupType) {\r\n    LookupType[\"Partials\"] = \"partials\";\r\n    LookupType[\"Layouts\"] = \"layouts\";\r\n    LookupType[\"Root\"] = \"root\";\r\n})(LookupType || (LookupType = {}));\r\nclass Loader {\r\n    constructor(options) {\r\n        this.options = options;\r\n        if (options.relativeReference) {\r\n            const sep = options.fs.sep;\r\n            assert(sep, '`fs.sep` is required for relative reference');\r\n            const rRelativePath = new RegExp(['.' + sep, '..' + sep, './', '../'].map(prefix => escapeRegex(prefix)).join('|'));\r\n            this.shouldLoadRelative = (referencedFile) => rRelativePath.test(referencedFile);\r\n        }\r\n        else {\r\n            this.shouldLoadRelative = (referencedFile) => false;\r\n        }\r\n        this.contains = this.options.fs.contains || (() => true);\r\n    }\r\n    *lookup(file, type, sync, currentFile) {\r\n        const { fs } = this.options;\r\n        const dirs = this.options[type];\r\n        for (const filepath of this.candidates(file, dirs, currentFile, type !== LookupType.Root)) {\r\n            if (sync ? fs.existsSync(filepath) : yield fs.exists(filepath))\r\n                return filepath;\r\n        }\r\n        throw this.lookupError(file, dirs);\r\n    }\r\n    *candidates(file, dirs, currentFile, enforceRoot) {\r\n        const { fs, extname } = this.options;\r\n        if (this.shouldLoadRelative(file) && currentFile) {\r\n            const referenced = fs.resolve(this.dirname(currentFile), file, extname);\r\n            for (const dir of dirs) {\r\n                if (!enforceRoot || this.contains(dir, referenced)) {\r\n                    // the relatively referenced file is within one of root dirs\r\n                    yield referenced;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (const dir of dirs) {\r\n            const referenced = fs.resolve(dir, file, extname);\r\n            if (!enforceRoot || this.contains(dir, referenced)) {\r\n                yield referenced;\r\n            }\r\n        }\r\n        if (fs.fallback !== undefined) {\r\n            const filepath = fs.fallback(file);\r\n            if (filepath !== undefined)\r\n                yield filepath;\r\n        }\r\n    }\r\n    dirname(path) {\r\n        const fs = this.options.fs;\r\n        assert(fs.dirname, '`fs.dirname` is required for relative reference');\r\n        return fs.dirname(path);\r\n    }\r\n    lookupError(file, roots) {\r\n        const err = new Error('ENOENT');\r\n        err.message = `ENOENT: Failed to lookup \"${file}\" in \"${roots}\"`;\r\n        err.code = 'ENOENT';\r\n        return err;\r\n    }\r\n}\n\nclass Parser {\r\n    constructor(liquid) {\r\n        this.liquid = liquid;\r\n        this.cache = this.liquid.options.cache;\r\n        this.fs = this.liquid.options.fs;\r\n        this.parseFile = this.cache ? this._parseFileCached : this._parseFile;\r\n        this.loader = new Loader(this.liquid.options);\r\n    }\r\n    parse(html, filepath) {\r\n        const tokenizer = new Tokenizer(html, this.liquid.options.operators, filepath);\r\n        const tokens = tokenizer.readTopLevelTokens(this.liquid.options);\r\n        return this.parseTokens(tokens);\r\n    }\r\n    parseTokens(tokens) {\r\n        let token;\r\n        const templates = [];\r\n        while ((token = tokens.shift())) {\r\n            templates.push(this.parseToken(token, tokens));\r\n        }\r\n        return templates;\r\n    }\r\n    parseToken(token, remainTokens) {\r\n        try {\r\n            if (isTagToken(token)) {\r\n                const TagClass = this.liquid.tags[token.name];\r\n                assert(TagClass, `tag \"${token.name}\" not found`);\r\n                return new TagClass(token, remainTokens, this.liquid);\r\n            }\r\n            if (isOutputToken(token)) {\r\n                return new Output(token, this.liquid);\r\n            }\r\n            return new HTML(token);\r\n        }\r\n        catch (e) {\r\n            throw new ParseError(e, token);\r\n        }\r\n    }\r\n    parseStream(tokens) {\r\n        return new ParseStream(tokens, (token, tokens) => this.parseToken(token, tokens));\r\n    }\r\n    *_parseFileCached(file, sync, type = LookupType.Root, currentFile) {\r\n        const cache = this.cache;\r\n        const key = this.loader.shouldLoadRelative(file) ? currentFile + ',' + file : type + ':' + file;\r\n        const tpls = yield cache.read(key);\r\n        if (tpls)\r\n            return tpls;\r\n        const task = this._parseFile(file, sync, type, currentFile);\r\n        // sync mode: exec the task and cache the result\r\n        // async mode: cache the task before exec\r\n        const taskOrTpl = sync ? yield task : toPromise(task);\r\n        cache.write(key, taskOrTpl);\r\n        // note: concurrent tasks will be reused, cache for failed task is removed until its end\r\n        try {\r\n            return yield taskOrTpl;\r\n        }\r\n        catch (err) {\r\n            cache.remove(key);\r\n            throw err;\r\n        }\r\n    }\r\n    *_parseFile(file, sync, type = LookupType.Root, currentFile) {\r\n        const filepath = yield this.loader.lookup(file, type, sync, currentFile);\r\n        return this.liquid.parse(sync ? this.fs.readFileSync(filepath) : yield this.fs.readFile(filepath), filepath);\r\n    }\r\n}\n\nconst rHex = /[\\da-fA-F]/;\r\nconst rOct = /[0-7]/;\r\nconst escapeChar = {\r\n    b: '\\b',\r\n    f: '\\f',\r\n    n: '\\n',\r\n    r: '\\r',\r\n    t: '\\t',\r\n    v: '\\x0B'\r\n};\r\nfunction hexVal(c) {\r\n    const code = c.charCodeAt(0);\r\n    if (code >= 97)\r\n        return code - 87;\r\n    if (code >= 65)\r\n        return code - 55;\r\n    return code - 48;\r\n}\r\nfunction parseStringLiteral(str) {\r\n    let ret = '';\r\n    for (let i = 1; i < str.length - 1; i++) {\r\n        if (str[i] !== '\\\\') {\r\n            ret += str[i];\r\n            continue;\r\n        }\r\n        if (escapeChar[str[i + 1]] !== undefined) {\r\n            ret += escapeChar[str[++i]];\r\n        }\r\n        else if (str[i + 1] === 'u') {\r\n            let val = 0;\r\n            let j = i + 2;\r\n            while (j <= i + 5 && rHex.test(str[j])) {\r\n                val = val * 16 + hexVal(str[j++]);\r\n            }\r\n            i = j - 1;\r\n            ret += String.fromCharCode(val);\r\n        }\r\n        else if (!rOct.test(str[i + 1])) {\r\n            ret += str[++i];\r\n        }\r\n        else {\r\n            let j = i + 1;\r\n            let val = 0;\r\n            while (j <= i + 3 && rOct.test(str[j])) {\r\n                val = val * 8 + hexVal(str[j++]);\r\n            }\r\n            i = j - 1;\r\n            ret += String.fromCharCode(val);\r\n        }\r\n    }\r\n    return ret;\r\n}\n\nvar TokenKind;\r\n(function (TokenKind) {\r\n    TokenKind[TokenKind[\"Number\"] = 1] = \"Number\";\r\n    TokenKind[TokenKind[\"Literal\"] = 2] = \"Literal\";\r\n    TokenKind[TokenKind[\"Tag\"] = 4] = \"Tag\";\r\n    TokenKind[TokenKind[\"Output\"] = 8] = \"Output\";\r\n    TokenKind[TokenKind[\"HTML\"] = 16] = \"HTML\";\r\n    TokenKind[TokenKind[\"Filter\"] = 32] = \"Filter\";\r\n    TokenKind[TokenKind[\"Hash\"] = 64] = \"Hash\";\r\n    TokenKind[TokenKind[\"PropertyAccess\"] = 128] = \"PropertyAccess\";\r\n    TokenKind[TokenKind[\"Word\"] = 256] = \"Word\";\r\n    TokenKind[TokenKind[\"Range\"] = 512] = \"Range\";\r\n    TokenKind[TokenKind[\"Quoted\"] = 1024] = \"Quoted\";\r\n    TokenKind[TokenKind[\"Operator\"] = 2048] = \"Operator\";\r\n    TokenKind[TokenKind[\"Delimited\"] = 12] = \"Delimited\";\r\n})(TokenKind || (TokenKind = {}));\n\nfunction isDelimitedToken(val) {\r\n    return !!(getKind(val) & TokenKind.Delimited);\r\n}\r\nfunction isOperatorToken(val) {\r\n    return getKind(val) === TokenKind.Operator;\r\n}\r\nfunction isHTMLToken(val) {\r\n    return getKind(val) === TokenKind.HTML;\r\n}\r\nfunction isOutputToken(val) {\r\n    return getKind(val) === TokenKind.Output;\r\n}\r\nfunction isTagToken(val) {\r\n    return getKind(val) === TokenKind.Tag;\r\n}\r\nfunction isQuotedToken(val) {\r\n    return getKind(val) === TokenKind.Quoted;\r\n}\r\nfunction isLiteralToken(val) {\r\n    return getKind(val) === TokenKind.Literal;\r\n}\r\nfunction isNumberToken(val) {\r\n    return getKind(val) === TokenKind.Number;\r\n}\r\nfunction isPropertyAccessToken(val) {\r\n    return getKind(val) === TokenKind.PropertyAccess;\r\n}\r\nfunction isWordToken(val) {\r\n    return getKind(val) === TokenKind.Word;\r\n}\r\nfunction isRangeToken(val) {\r\n    return getKind(val) === TokenKind.Range;\r\n}\r\nfunction getKind(val) {\r\n    return val ? val.kind : -1;\r\n}\n\nvar typeGuards = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  isDelimitedToken: isDelimitedToken,\n  isOperatorToken: isOperatorToken,\n  isHTMLToken: isHTMLToken,\n  isOutputToken: isOutputToken,\n  isTagToken: isTagToken,\n  isQuotedToken: isQuotedToken,\n  isLiteralToken: isLiteralToken,\n  isNumberToken: isNumberToken,\n  isPropertyAccessToken: isPropertyAccessToken,\n  isWordToken: isWordToken,\n  isRangeToken: isRangeToken\n});\n\nclass Context {\r\n    constructor(env = {}, opts = defaultOptions, renderOptions = {}) {\r\n        var _a, _b, _c;\r\n        /**\r\n         * insert a Context-level empty scope,\r\n         * for tags like `{% capture %}` `{% assign %}` to operate\r\n         */\r\n        this.scopes = [{}];\r\n        this.registers = {};\r\n        this.sync = !!renderOptions.sync;\r\n        this.opts = opts;\r\n        this.globals = (_a = renderOptions.globals) !== null && _a !== void 0 ? _a : opts.globals;\r\n        this.environments = env;\r\n        this.strictVariables = (_b = renderOptions.strictVariables) !== null && _b !== void 0 ? _b : this.opts.strictVariables;\r\n        this.ownPropertyOnly = (_c = renderOptions.ownPropertyOnly) !== null && _c !== void 0 ? _c : opts.ownPropertyOnly;\r\n    }\r\n    getRegister(key) {\r\n        return (this.registers[key] = this.registers[key] || {});\r\n    }\r\n    setRegister(key, value) {\r\n        return (this.registers[key] = value);\r\n    }\r\n    saveRegister(...keys) {\r\n        return keys.map(key => [key, this.getRegister(key)]);\r\n    }\r\n    restoreRegister(keyValues) {\r\n        return keyValues.forEach(([key, value]) => this.setRegister(key, value));\r\n    }\r\n    getAll() {\r\n        return [this.globals, this.environments, ...this.scopes]\r\n            .reduce((ctx, val) => __assign(ctx, val), {});\r\n    }\r\n    /**\r\n     * @deprecated use `_get()` or `getSync()` instead\r\n     */\r\n    get(paths) {\r\n        return this.getSync(paths);\r\n    }\r\n    getSync(paths) {\r\n        return toValueSync(this._get(paths));\r\n    }\r\n    *_get(paths) {\r\n        const scope = this.findScope(paths[0]);\r\n        return yield this._getFromScope(scope, paths);\r\n    }\r\n    /**\r\n     * @deprecated use `_get()` instead\r\n     */\r\n    getFromScope(scope, paths) {\r\n        return toValueSync(this._getFromScope(scope, paths));\r\n    }\r\n    *_getFromScope(scope, paths) {\r\n        if (isString(paths))\r\n            paths = paths.split('.');\r\n        for (let i = 0; i < paths.length; i++) {\r\n            scope = yield readProperty(scope, paths[i], this.ownPropertyOnly);\r\n            if (isNil(scope) && this.strictVariables) {\r\n                throw new InternalUndefinedVariableError(paths.slice(0, i + 1).join('.'));\r\n            }\r\n        }\r\n        return scope;\r\n    }\r\n    push(ctx) {\r\n        return this.scopes.push(ctx);\r\n    }\r\n    pop() {\r\n        return this.scopes.pop();\r\n    }\r\n    bottom() {\r\n        return this.scopes[0];\r\n    }\r\n    findScope(key) {\r\n        for (let i = this.scopes.length - 1; i >= 0; i--) {\r\n            const candidate = this.scopes[i];\r\n            if (key in candidate)\r\n                return candidate;\r\n        }\r\n        if (key in this.environments)\r\n            return this.environments;\r\n        return this.globals;\r\n    }\r\n}\r\nfunction readProperty(obj, key, ownPropertyOnly) {\r\n    obj = toLiquid(obj);\r\n    if (isNil(obj))\r\n        return obj;\r\n    if (isArray(obj) && key < 0)\r\n        return obj[obj.length + +key];\r\n    const value = readJSProperty(obj, key, ownPropertyOnly);\r\n    if (value === undefined && obj instanceof Drop)\r\n        return obj.liquidMethodMissing(key);\r\n    if (isFunction(value))\r\n        return value.call(obj);\r\n    if (key === 'size')\r\n        return readSize(obj);\r\n    else if (key === 'first')\r\n        return readFirst(obj);\r\n    else if (key === 'last')\r\n        return readLast(obj);\r\n    return value;\r\n}\r\nfunction readJSProperty(obj, key, ownPropertyOnly) {\r\n    if (ownPropertyOnly && !Object.hasOwnProperty.call(obj, key) && !(obj instanceof Drop))\r\n        return undefined;\r\n    return obj[key];\r\n}\r\nfunction readFirst(obj) {\r\n    if (isArray(obj))\r\n        return obj[0];\r\n    return obj['first'];\r\n}\r\nfunction readLast(obj) {\r\n    if (isArray(obj))\r\n        return obj[obj.length - 1];\r\n    return obj['last'];\r\n}\r\nfunction readSize(obj) {\r\n    if (obj.hasOwnProperty('size') || obj['size'] !== undefined)\r\n        return obj['size'];\r\n    if (isArray(obj) || isString(obj))\r\n        return obj.length;\r\n    if (typeof obj === 'object')\r\n        return Object.keys(obj).length;\r\n}\n\nvar BlockMode;\r\n(function (BlockMode) {\r\n    /* store rendered html into blocks */\r\n    BlockMode[BlockMode[\"OUTPUT\"] = 0] = \"OUTPUT\";\r\n    /* output rendered html directly */\r\n    BlockMode[BlockMode[\"STORE\"] = 1] = \"STORE\";\r\n})(BlockMode || (BlockMode = {}));\n\nconst abs = argumentsToValue(Math.abs);\r\nconst at_least = argumentsToValue(Math.max);\r\nconst at_most = argumentsToValue(Math.min);\r\nconst ceil = argumentsToValue(Math.ceil);\r\nconst divided_by = argumentsToValue((dividend, divisor, integerArithmetic = false) => integerArithmetic ? Math.floor(dividend / divisor) : dividend / divisor);\r\nconst floor = argumentsToValue(Math.floor);\r\nconst minus = argumentsToValue((v, arg) => v - arg);\r\nconst modulo = argumentsToValue((v, arg) => v % arg);\r\nconst times = argumentsToValue((v, arg) => v * arg);\r\nfunction round(v, arg = 0) {\r\n    v = toValue(v);\r\n    arg = toValue(arg);\r\n    const amp = Math.pow(10, arg);\r\n    return Math.round(v * amp) / amp;\r\n}\r\nfunction plus(v, arg) {\r\n    v = toValue(v);\r\n    arg = toValue(arg);\r\n    return Number(v) + Number(arg);\r\n}\n\nvar mathFilters = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  abs: abs,\n  at_least: at_least,\n  at_most: at_most,\n  ceil: ceil,\n  divided_by: divided_by,\n  floor: floor,\n  minus: minus,\n  modulo: modulo,\n  times: times,\n  round: round,\n  plus: plus\n});\n\nconst url_decode = (x) => stringify(x).split('+').map(decodeURIComponent).join(' ');\r\nconst url_encode = (x) => stringify(x).split(' ').map(encodeURIComponent).join('+');\n\nvar urlFilters = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  url_decode: url_decode,\n  url_encode: url_encode\n});\n\nconst join = argumentsToValue((v, arg) => toArray(v).join(arg === undefined ? ' ' : arg));\r\nconst last$1 = argumentsToValue((v) => isArray(v) ? last(v) : '');\r\nconst first = argumentsToValue((v) => isArray(v) ? v[0] : '');\r\nconst reverse = argumentsToValue((v) => [...toArray(v)].reverse());\r\nfunction* sort(arr, property) {\r\n    const values = [];\r\n    for (const item of toArray(toValue(arr))) {\r\n        values.push([\r\n            item,\r\n            property ? yield this.context._getFromScope(item, stringify(property).split('.')) : item\r\n        ]);\r\n    }\r\n    return values.sort((lhs, rhs) => {\r\n        const lvalue = lhs[1];\r\n        const rvalue = rhs[1];\r\n        return lvalue < rvalue ? -1 : (lvalue > rvalue ? 1 : 0);\r\n    }).map(tuple => tuple[0]);\r\n}\r\nfunction sort_natural(input, property) {\r\n    input = toValue(input);\r\n    const propertyString = stringify(property);\r\n    const compare = property === undefined\r\n        ? caseInsensitiveCompare\r\n        : (lhs, rhs) => caseInsensitiveCompare(lhs[propertyString], rhs[propertyString]);\r\n    return [...toArray(input)].sort(compare);\r\n}\r\nconst size = (v) => (v && v.length) || 0;\r\nfunction* map(arr, property) {\r\n    const results = [];\r\n    for (const item of toArray(toValue(arr))) {\r\n        results.push(yield this.context._getFromScope(item, stringify(property).split('.')));\r\n    }\r\n    return results;\r\n}\r\nfunction compact(arr) {\r\n    arr = toValue(arr);\r\n    return toArray(arr).filter(x => !isNil(toValue(x)));\r\n}\r\nfunction concat(v, arg = []) {\r\n    v = toValue(v);\r\n    arg = toArray(arg).map(v => toValue(v));\r\n    return toArray(v).concat(arg);\r\n}\r\nfunction slice(v, begin, length = 1) {\r\n    v = toValue(v);\r\n    if (isNil(v))\r\n        return [];\r\n    if (!isArray(v))\r\n        v = stringify(v);\r\n    begin = begin < 0 ? v.length + begin : begin;\r\n    return v.slice(begin, begin + length);\r\n}\r\nfunction* where(arr, property, expected) {\r\n    const values = [];\r\n    arr = toArray(toValue(arr));\r\n    for (const item of arr) {\r\n        values.push(yield this.context._getFromScope(item, stringify(property).split('.')));\r\n    }\r\n    return arr.filter((_, i) => {\r\n        if (expected === undefined)\r\n            return isTruthy(values[i], this.context);\r\n        if (isComparable(expected))\r\n            return expected.equals(values[i]);\r\n        return values[i] === expected;\r\n    });\r\n}\r\nfunction uniq(arr) {\r\n    arr = toValue(arr);\r\n    const u = {};\r\n    return (arr || []).filter(val => {\r\n        if (hasOwnProperty.call(u, String(val)))\r\n            return false;\r\n        u[String(val)] = true;\r\n        return true;\r\n    });\r\n}\n\nvar arrayFilters = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  join: join,\n  last: last$1,\n  first: first,\n  reverse: reverse,\n  sort: sort,\n  sort_natural: sort_natural,\n  size: size,\n  map: map,\n  compact: compact,\n  concat: concat,\n  slice: slice,\n  where: where,\n  uniq: uniq\n});\n\nfunction date(v, format, timezoneOffset) {\r\n    const opts = this.context.opts;\r\n    let date;\r\n    v = toValue(v);\r\n    format = toValue(format);\r\n    if (isNil(format))\r\n        format = opts.dateFormat;\r\n    else\r\n        format = stringify(format);\r\n    if (v === 'now' || v === 'today') {\r\n        date = new Date();\r\n    }\r\n    else if (isNumber(v)) {\r\n        date = new Date(v * 1000);\r\n    }\r\n    else if (isString(v)) {\r\n        if (/^\\d+$/.test(v)) {\r\n            date = new Date(+v * 1000);\r\n        }\r\n        else if (opts.preserveTimezones) {\r\n            date = TimezoneDate.createDateFixedToTimezone(v);\r\n        }\r\n        else {\r\n            date = new Date(v);\r\n        }\r\n    }\r\n    else {\r\n        date = v;\r\n    }\r\n    if (!isValidDate(date))\r\n        return v;\r\n    if (timezoneOffset !== undefined) {\r\n        date = new TimezoneDate(date, parseTimezoneOffset(date, timezoneOffset));\r\n    }\r\n    else if (opts.timezoneOffset !== undefined) {\r\n        date = new TimezoneDate(date, parseTimezoneOffset(date, opts.timezoneOffset));\r\n    }\r\n    return strftime(date, format);\r\n}\r\nfunction isValidDate(date) {\r\n    return (date instanceof Date || date instanceof TimezoneDate) && !isNaN(date.getTime());\r\n}\r\n/**\r\n * need pass in a `date` because offset is dependent on whether DST is active\r\n */\r\nfunction parseTimezoneOffset(date, timeZone) {\r\n    if (isNumber(timeZone))\r\n        return timeZone;\r\n    const utcDate = new Date(date.toLocaleString('en-US', { timeZone: 'UTC' }));\r\n    const tzDate = new Date(date.toLocaleString('en-US', { timeZone }));\r\n    return (utcDate.getTime() - tzDate.getTime()) / 6e4;\r\n}\n\nvar dateFilters = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  date: date\n});\n\n/**\r\n * String related filters\r\n *\r\n * * prefer stringify() to String() since `undefined`, `null` should eval ''\r\n */\r\nfunction append(v, arg) {\r\n    assert(arguments.length === 2, 'append expect 2 arguments');\r\n    return stringify(v) + stringify(arg);\r\n}\r\nfunction prepend(v, arg) {\r\n    assert(arguments.length === 2, 'prepend expect 2 arguments');\r\n    return stringify(arg) + stringify(v);\r\n}\r\nfunction lstrip(v, chars) {\r\n    if (chars) {\r\n        chars = escapeRegExp(stringify(chars));\r\n        return stringify(v).replace(new RegExp(`^[${chars}]+`, 'g'), '');\r\n    }\r\n    return stringify(v).replace(/^\\s+/, '');\r\n}\r\nfunction downcase(v) {\r\n    return stringify(v).toLowerCase();\r\n}\r\nfunction upcase(str) {\r\n    return stringify(str).toUpperCase();\r\n}\r\nfunction remove(v, arg) {\r\n    return stringify(v).split(String(arg)).join('');\r\n}\r\nfunction remove_first(v, l) {\r\n    return stringify(v).replace(String(l), '');\r\n}\r\nfunction remove_last(v, l) {\r\n    const str = stringify(v);\r\n    const pattern = String(l);\r\n    const index = str.lastIndexOf(pattern);\r\n    if (index === -1)\r\n        return str;\r\n    return str.substring(0, index) + str.substring(index + pattern.length + 1);\r\n}\r\nfunction rstrip(str, chars) {\r\n    if (chars) {\r\n        chars = escapeRegExp(stringify(chars));\r\n        return stringify(str).replace(new RegExp(`[${chars}]+$`, 'g'), '');\r\n    }\r\n    return stringify(str).replace(/\\s+$/, '');\r\n}\r\nfunction split(v, arg) {\r\n    const arr = stringify(v).split(String(arg));\r\n    // align to ruby split, which is the behavior of shopify/liquid\r\n    // see: https://ruby-doc.org/core-2.4.0/String.html#method-i-split\r\n    while (arr.length && arr[arr.length - 1] === '')\r\n        arr.pop();\r\n    return arr;\r\n}\r\nfunction strip(v, chars) {\r\n    if (chars) {\r\n        chars = escapeRegExp(stringify(chars));\r\n        return stringify(v)\r\n            .replace(new RegExp(`^[${chars}]+`, 'g'), '')\r\n            .replace(new RegExp(`[${chars}]+$`, 'g'), '');\r\n    }\r\n    return stringify(v).trim();\r\n}\r\nfunction strip_newlines(v) {\r\n    return stringify(v).replace(/\\n/g, '');\r\n}\r\nfunction capitalize(str) {\r\n    str = stringify(str);\r\n    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\r\n}\r\nfunction replace(v, pattern, replacement) {\r\n    return stringify(v).split(String(pattern)).join(replacement);\r\n}\r\nfunction replace_first(v, arg1, arg2) {\r\n    return stringify(v).replace(String(arg1), arg2);\r\n}\r\nfunction replace_last(v, arg1, arg2) {\r\n    const str = stringify(v);\r\n    const pattern = String(arg1);\r\n    const index = str.lastIndexOf(pattern);\r\n    if (index === -1)\r\n        return str;\r\n    const replacement = String(arg2);\r\n    return str.substring(0, index) + replacement + str.substring(index + pattern.length);\r\n}\r\nfunction truncate(v, l = 50, o = '...') {\r\n    v = stringify(v);\r\n    if (v.length <= l)\r\n        return v;\r\n    return v.substring(0, l - o.length) + o;\r\n}\r\nfunction truncatewords(v, words = 15, o = '...') {\r\n    const arr = stringify(v).split(/\\s+/);\r\n    if (words <= 0)\r\n        words = 1;\r\n    let ret = arr.slice(0, words).join(' ');\r\n    if (arr.length >= words)\r\n        ret += o;\r\n    return ret;\r\n}\n\nvar stringFilters = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  append: append,\n  prepend: prepend,\n  lstrip: lstrip,\n  downcase: downcase,\n  upcase: upcase,\n  remove: remove,\n  remove_first: remove_first,\n  remove_last: remove_last,\n  rstrip: rstrip,\n  split: split,\n  strip: strip,\n  strip_newlines: strip_newlines,\n  capitalize: capitalize,\n  replace: replace,\n  replace_first: replace_first,\n  replace_last: replace_last,\n  truncate: truncate,\n  truncatewords: truncatewords\n});\n\nconst filters = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, htmlFilters), mathFilters), urlFilters), arrayFilters), dateFilters), stringFilters), { json,\r\n    raw, default: Default });\n\nclass AssignTag extends Tag {\r\n    constructor(token, remainTokens, liquid) {\r\n        super(token, remainTokens, liquid);\r\n        const tokenizer = new Tokenizer(token.args, liquid.options.operators);\r\n        this.key = tokenizer.readIdentifier().content;\r\n        tokenizer.skipBlank();\r\n        assert(tokenizer.peek() === '=', () => `illegal token ${token.getText()}`);\r\n        tokenizer.advance();\r\n        this.value = new Value(tokenizer.remaining(), this.liquid);\r\n    }\r\n    *render(ctx) {\r\n        ctx.bottom()[this.key] = yield this.value.value(ctx, this.liquid.options.lenientIf);\r\n    }\r\n}\n\nconst MODIFIERS = ['offset', 'limit', 'reversed'];\r\nclass ForTag extends Tag {\r\n    constructor(token, remainTokens, liquid) {\r\n        super(token, remainTokens, liquid);\r\n        const tokenizer = new Tokenizer(token.args, this.liquid.options.operators);\r\n        const variable = tokenizer.readIdentifier();\r\n        const inStr = tokenizer.readIdentifier();\r\n        const collection = tokenizer.readValue();\r\n        if (!variable.size() || inStr.content !== 'in' || !collection) {\r\n            throw new Error(`illegal tag: ${token.getText()}`);\r\n        }\r\n        this.variable = variable.content;\r\n        this.collection = collection;\r\n        this.hash = new Hash(tokenizer.remaining());\r\n        this.templates = [];\r\n        this.elseTemplates = [];\r\n        let p;\r\n        const stream = this.liquid.parser.parseStream(remainTokens)\r\n            .on('start', () => (p = this.templates))\r\n            .on('tag:else', () => (p = this.elseTemplates))\r\n            .on('tag:endfor', () => stream.stop())\r\n            .on('template', (tpl) => p.push(tpl))\r\n            .on('end', () => {\r\n            throw new Error(`tag ${token.getText()} not closed`);\r\n        });\r\n        stream.start();\r\n    }\r\n    *render(ctx, emitter) {\r\n        const r = this.liquid.renderer;\r\n        let collection = toEnumerable(yield evalToken(this.collection, ctx));\r\n        if (!collection.length) {\r\n            yield r.renderTemplates(this.elseTemplates, ctx, emitter);\r\n            return;\r\n        }\r\n        const continueKey = 'continue-' + this.variable + '-' + this.collection.getText();\r\n        ctx.push({ continue: ctx.getRegister(continueKey) });\r\n        const hash = yield this.hash.render(ctx);\r\n        ctx.pop();\r\n        const modifiers = this.liquid.options.orderedFilterParameters\r\n            ? Object.keys(hash).filter(x => MODIFIERS.includes(x))\r\n            : MODIFIERS.filter(x => hash[x] !== undefined);\r\n        collection = modifiers.reduce((collection, modifier) => {\r\n            if (modifier === 'offset')\r\n                return offset(collection, hash['offset']);\r\n            if (modifier === 'limit')\r\n                return limit(collection, hash['limit']);\r\n            return reversed(collection);\r\n        }, collection);\r\n        ctx.setRegister(continueKey, (hash['offset'] || 0) + collection.length);\r\n        const scope = { forloop: new ForloopDrop(collection.length, this.collection.getText(), this.variable) };\r\n        ctx.push(scope);\r\n        for (const item of collection) {\r\n            scope[this.variable] = item;\r\n            yield r.renderTemplates(this.templates, ctx, emitter);\r\n            if (emitter['break']) {\r\n                emitter['break'] = false;\r\n                break;\r\n            }\r\n            emitter['continue'] = false;\r\n            scope.forloop.next();\r\n        }\r\n        ctx.pop();\r\n    }\r\n}\r\nfunction reversed(arr) {\r\n    return [...arr].reverse();\r\n}\r\nfunction offset(arr, count) {\r\n    return arr.slice(count);\r\n}\r\nfunction limit(arr, count) {\r\n    return arr.slice(0, count);\r\n}\n\nclass CaptureTag extends Tag {\r\n    constructor(tagToken, remainTokens, liquid) {\r\n        super(tagToken, remainTokens, liquid);\r\n        this.templates = [];\r\n        const tokenizer = new Tokenizer(tagToken.args, this.liquid.options.operators);\r\n        this.variable = readVariableName(tokenizer);\r\n        assert(this.variable, () => `${tagToken.args} not valid identifier`);\r\n        while (remainTokens.length) {\r\n            const token = remainTokens.shift();\r\n            if (isTagToken(token) && token.name === 'endcapture')\r\n                return;\r\n            this.templates.push(liquid.parser.parseToken(token, remainTokens));\r\n        }\r\n        throw new Error(`tag ${tagToken.getText()} not closed`);\r\n    }\r\n    *render(ctx) {\r\n        const r = this.liquid.renderer;\r\n        const html = yield r.renderTemplates(this.templates, ctx);\r\n        ctx.bottom()[this.variable] = html;\r\n    }\r\n}\r\nfunction readVariableName(tokenizer) {\r\n    const word = tokenizer.readIdentifier().content;\r\n    if (word)\r\n        return word;\r\n    const quoted = tokenizer.readQuoted();\r\n    if (quoted)\r\n        return evalQuotedToken(quoted);\r\n}\n\nclass CaseTag extends Tag {\r\n    constructor(tagToken, remainTokens, liquid) {\r\n        super(tagToken, remainTokens, liquid);\r\n        this.branches = [];\r\n        this.elseTemplates = [];\r\n        this.value = new Value(tagToken.args, this.liquid);\r\n        this.elseTemplates = [];\r\n        let p = [];\r\n        const stream = this.liquid.parser.parseStream(remainTokens)\r\n            .on('tag:when', (token) => {\r\n            p = [];\r\n            const tokenizer = new Tokenizer(token.args, this.liquid.options.operators);\r\n            const values = [];\r\n            while (!tokenizer.end()) {\r\n                values.push(tokenizer.readValueOrThrow());\r\n                tokenizer.readTo(',');\r\n            }\r\n            this.branches.push({\r\n                values,\r\n                templates: p\r\n            });\r\n        })\r\n            .on('tag:else', () => (p = this.elseTemplates))\r\n            .on('tag:endcase', () => stream.stop())\r\n            .on('template', (tpl) => p.push(tpl))\r\n            .on('end', () => {\r\n            throw new Error(`tag ${tagToken.getText()} not closed`);\r\n        });\r\n        stream.start();\r\n    }\r\n    *render(ctx, emitter) {\r\n        const r = this.liquid.renderer;\r\n        const target = toValue(yield this.value.value(ctx, ctx.opts.lenientIf));\r\n        let branchHit = false;\r\n        for (const branch of this.branches) {\r\n            for (const valueToken of branch.values) {\r\n                const value = yield evalToken(valueToken, ctx, ctx.opts.lenientIf);\r\n                if (target === value) {\r\n                    yield r.renderTemplates(branch.templates, ctx, emitter);\r\n                    branchHit = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (!branchHit) {\r\n            yield r.renderTemplates(this.elseTemplates, ctx, emitter);\r\n        }\r\n    }\r\n}\n\nclass CommentTag extends Tag {\r\n    constructor(tagToken, remainTokens, liquid) {\r\n        super(tagToken, remainTokens, liquid);\r\n        while (remainTokens.length) {\r\n            const token = remainTokens.shift();\r\n            if (isTagToken(token) && token.name === 'endcomment')\r\n                return;\r\n        }\r\n        throw new Error(`tag ${tagToken.getText()} not closed`);\r\n    }\r\n    render() { }\r\n}\n\nclass RenderTag extends Tag {\r\n    constructor(token, remainTokens, liquid) {\r\n        super(token, remainTokens, liquid);\r\n        const args = token.args;\r\n        const tokenizer = new Tokenizer(args, this.liquid.options.operators);\r\n        this.file = parseFilePath(tokenizer, this.liquid);\r\n        this.currentFile = token.file;\r\n        while (!tokenizer.end()) {\r\n            tokenizer.skipBlank();\r\n            const begin = tokenizer.p;\r\n            const keyword = tokenizer.readIdentifier();\r\n            if (keyword.content === 'with' || keyword.content === 'for') {\r\n                tokenizer.skipBlank();\r\n                // can be normal key/value pair, like \"with: true\"\r\n                if (tokenizer.peek() !== ':') {\r\n                    const value = tokenizer.readValue();\r\n                    // can be normal key, like \"with,\"\r\n                    if (value) {\r\n                        const beforeAs = tokenizer.p;\r\n                        const asStr = tokenizer.readIdentifier();\r\n                        let alias;\r\n                        if (asStr.content === 'as')\r\n                            alias = tokenizer.readIdentifier();\r\n                        else\r\n                            tokenizer.p = beforeAs;\r\n                        this[keyword.content] = { value, alias: alias && alias.content };\r\n                        tokenizer.skipBlank();\r\n                        if (tokenizer.peek() === ',')\r\n                            tokenizer.advance();\r\n                        continue; // matched!\r\n                    }\r\n                }\r\n            }\r\n            /**\r\n             * restore cursor if with/for not matched\r\n             */\r\n            tokenizer.p = begin;\r\n            break;\r\n        }\r\n        this.hash = new Hash(tokenizer.remaining());\r\n    }\r\n    *render(ctx, emitter) {\r\n        const { liquid, hash } = this;\r\n        const filepath = (yield renderFilePath(this['file'], ctx, liquid));\r\n        assert(filepath, () => `illegal filename \"${filepath}\"`);\r\n        const childCtx = new Context({}, ctx.opts, { sync: ctx.sync, globals: ctx.globals, strictVariables: ctx.strictVariables });\r\n        const scope = childCtx.bottom();\r\n        __assign(scope, yield hash.render(ctx));\r\n        if (this['with']) {\r\n            const { value, alias } = this['with'];\r\n            scope[alias || filepath] = yield evalToken(value, ctx);\r\n        }\r\n        if (this['for']) {\r\n            const { value, alias } = this['for'];\r\n            const collection = toEnumerable(yield evalToken(value, ctx));\r\n            scope['forloop'] = new ForloopDrop(collection.length, value.getText(), alias);\r\n            for (const item of collection) {\r\n                scope[alias] = item;\r\n                const templates = (yield liquid._parsePartialFile(filepath, childCtx.sync, this['currentFile']));\r\n                yield liquid.renderer.renderTemplates(templates, childCtx, emitter);\r\n                scope['forloop'].next();\r\n            }\r\n        }\r\n        else {\r\n            const templates = (yield liquid._parsePartialFile(filepath, childCtx.sync, this['currentFile']));\r\n            yield liquid.renderer.renderTemplates(templates, childCtx, emitter);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @return null for \"none\",\r\n * @return Template[] for quoted with tags and/or filters\r\n * @return Token for expression (not quoted)\r\n * @throws TypeError if cannot read next token\r\n */\r\nfunction parseFilePath(tokenizer, liquid) {\r\n    if (liquid.options.dynamicPartials) {\r\n        const file = tokenizer.readValue();\r\n        if (file === undefined)\r\n            throw new TypeError(`illegal argument \"${tokenizer.input}\"`);\r\n        if (file.getText() === 'none')\r\n            return;\r\n        if (isQuotedToken(file)) {\r\n            // for filenames like \"files/{{file}}\", eval as liquid template\r\n            const templates = liquid.parse(evalQuotedToken(file));\r\n            return optimize(templates);\r\n        }\r\n        return file;\r\n    }\r\n    const tokens = [...tokenizer.readFileNameTemplate(liquid.options)];\r\n    const templates = optimize(liquid.parser.parseTokens(tokens));\r\n    return templates === 'none' ? undefined : templates;\r\n}\r\nfunction optimize(templates) {\r\n    // for filenames like \"files/file.liquid\", extract the string directly\r\n    if (templates.length === 1 && isHTMLToken(templates[0].token))\r\n        return templates[0].token.getContent();\r\n    return templates;\r\n}\r\nfunction* renderFilePath(file, ctx, liquid) {\r\n    if (typeof file === 'string')\r\n        return file;\r\n    if (Array.isArray(file))\r\n        return liquid.renderer.renderTemplates(file, ctx);\r\n    return yield evalToken(file, ctx);\r\n}\n\nclass IncludeTag extends Tag {\r\n    constructor(token, remainTokens, liquid) {\r\n        super(token, remainTokens, liquid);\r\n        const args = token.args;\r\n        const tokenizer = new Tokenizer(args, this.liquid.options.operators);\r\n        this['file'] = parseFilePath(tokenizer, this.liquid);\r\n        this['currentFile'] = token.file;\r\n        const begin = tokenizer.p;\r\n        const withStr = tokenizer.readIdentifier();\r\n        if (withStr.content === 'with') {\r\n            tokenizer.skipBlank();\r\n            if (tokenizer.peek() !== ':') {\r\n                this.withVar = tokenizer.readValue();\r\n            }\r\n            else\r\n                tokenizer.p = begin;\r\n        }\r\n        else\r\n            tokenizer.p = begin;\r\n        this.hash = new Hash(tokenizer.remaining(), this.liquid.options.jekyllInclude);\r\n    }\r\n    *render(ctx, emitter) {\r\n        const { liquid, hash, withVar } = this;\r\n        const { renderer } = liquid;\r\n        const filepath = (yield renderFilePath(this['file'], ctx, liquid));\r\n        assert(filepath, () => `illegal filename \"${filepath}\"`);\r\n        const saved = ctx.saveRegister('blocks', 'blockMode');\r\n        ctx.setRegister('blocks', {});\r\n        ctx.setRegister('blockMode', BlockMode.OUTPUT);\r\n        const scope = (yield hash.render(ctx));\r\n        if (withVar)\r\n            scope[filepath] = yield evalToken(withVar, ctx);\r\n        const templates = (yield liquid._parsePartialFile(filepath, ctx.sync, this['currentFile']));\r\n        ctx.push(ctx.opts.jekyllInclude ? { include: scope } : scope);\r\n        yield renderer.renderTemplates(templates, ctx, emitter);\r\n        ctx.pop();\r\n        ctx.restoreRegister(saved);\r\n    }\r\n}\n\nclass DecrementTag extends Tag {\r\n    constructor(token, remainTokens, liquid) {\r\n        super(token, remainTokens, liquid);\r\n        const tokenizer = new Tokenizer(token.args, this.liquid.options.operators);\r\n        this.variable = tokenizer.readIdentifier().content;\r\n    }\r\n    render(context, emitter) {\r\n        const scope = context.environments;\r\n        if (!isNumber(scope[this.variable])) {\r\n            scope[this.variable] = 0;\r\n        }\r\n        emitter.write(stringify(--scope[this.variable]));\r\n    }\r\n}\n\nclass CycleTag extends Tag {\r\n    constructor(tagToken, remainTokens, liquid) {\r\n        super(tagToken, remainTokens, liquid);\r\n        this.candidates = [];\r\n        const tokenizer = new Tokenizer(tagToken.args, this.liquid.options.operators);\r\n        const group = tokenizer.readValue();\r\n        tokenizer.skipBlank();\r\n        if (group) {\r\n            if (tokenizer.peek() === ':') {\r\n                this.group = group;\r\n                tokenizer.advance();\r\n            }\r\n            else\r\n                this.candidates.push(group);\r\n        }\r\n        while (!tokenizer.end()) {\r\n            const value = tokenizer.readValue();\r\n            if (value)\r\n                this.candidates.push(value);\r\n            tokenizer.readTo(',');\r\n        }\r\n        assert(this.candidates.length, () => `empty candidates: ${tagToken.getText()}`);\r\n    }\r\n    *render(ctx, emitter) {\r\n        const group = (yield evalToken(this.group, ctx));\r\n        const fingerprint = `cycle:${group}:` + this.candidates.join(',');\r\n        const groups = ctx.getRegister('cycle');\r\n        let idx = groups[fingerprint];\r\n        if (idx === undefined) {\r\n            idx = groups[fingerprint] = 0;\r\n        }\r\n        const candidate = this.candidates[idx];\r\n        idx = (idx + 1) % this.candidates.length;\r\n        groups[fingerprint] = idx;\r\n        return yield evalToken(candidate, ctx);\r\n    }\r\n}\n\nclass IfTag extends Tag {\r\n    constructor(tagToken, remainTokens, liquid) {\r\n        super(tagToken, remainTokens, liquid);\r\n        this.branches = [];\r\n        this.elseTemplates = [];\r\n        let p;\r\n        liquid.parser.parseStream(remainTokens)\r\n            .on('start', () => this.branches.push({\r\n            value: new Value(tagToken.args, this.liquid),\r\n            templates: (p = [])\r\n        }))\r\n            .on('tag:elsif', (token) => this.branches.push({\r\n            value: new Value(token.args, this.liquid),\r\n            templates: (p = [])\r\n        }))\r\n            .on('tag:else', () => (p = this.elseTemplates))\r\n            .on('tag:endif', function () { this.stop(); })\r\n            .on('template', (tpl) => p.push(tpl))\r\n            .on('end', () => { throw new Error(`tag ${tagToken.getText()} not closed`); })\r\n            .start();\r\n    }\r\n    *render(ctx, emitter) {\r\n        const r = this.liquid.renderer;\r\n        for (const { value, templates } of this.branches) {\r\n            const v = yield value.value(ctx, ctx.opts.lenientIf);\r\n            if (isTruthy(v, ctx)) {\r\n                yield r.renderTemplates(templates, ctx, emitter);\r\n                return;\r\n            }\r\n        }\r\n        yield r.renderTemplates(this.elseTemplates, ctx, emitter);\r\n    }\r\n}\n\nclass IncrementTag extends Tag {\r\n    constructor(token, remainTokens, liquid) {\r\n        super(token, remainTokens, liquid);\r\n        const tokenizer = new Tokenizer(token.args, this.liquid.options.operators);\r\n        this.variable = tokenizer.readIdentifier().content;\r\n    }\r\n    render(context, emitter) {\r\n        const scope = context.environments;\r\n        if (!isNumber(scope[this.variable])) {\r\n            scope[this.variable] = 0;\r\n        }\r\n        const val = scope[this.variable];\r\n        scope[this.variable]++;\r\n        emitter.write(stringify(val));\r\n    }\r\n}\n\nclass LayoutTag extends Tag {\r\n    constructor(token, remainTokens, liquid) {\r\n        super(token, remainTokens, liquid);\r\n        const tokenizer = new Tokenizer(token.args, this.liquid.options.operators);\r\n        this.file = parseFilePath(tokenizer, this.liquid);\r\n        this['currentFile'] = token.file;\r\n        this.args = new Hash(tokenizer.remaining());\r\n        this.templates = this.liquid.parser.parseTokens(remainTokens);\r\n    }\r\n    *render(ctx, emitter) {\r\n        const { liquid, args, file } = this;\r\n        const { renderer } = liquid;\r\n        if (file === undefined) {\r\n            ctx.setRegister('blockMode', BlockMode.OUTPUT);\r\n            yield renderer.renderTemplates(this.templates, ctx, emitter);\r\n            return;\r\n        }\r\n        const filepath = (yield renderFilePath(this.file, ctx, liquid));\r\n        assert(filepath, () => `illegal filename \"${filepath}\"`);\r\n        const templates = (yield liquid._parseLayoutFile(filepath, ctx.sync, this['currentFile']));\r\n        // render remaining contents and store rendered results\r\n        ctx.setRegister('blockMode', BlockMode.STORE);\r\n        const html = yield renderer.renderTemplates(this.templates, ctx);\r\n        const blocks = ctx.getRegister('blocks');\r\n        // set whole content to anonymous block if anonymous doesn't specified\r\n        if (blocks[''] === undefined)\r\n            blocks[''] = (parent, emitter) => emitter.write(html);\r\n        ctx.setRegister('blockMode', BlockMode.OUTPUT);\r\n        // render the layout file use stored blocks\r\n        ctx.push((yield args.render(ctx)));\r\n        yield renderer.renderTemplates(templates, ctx, emitter);\r\n        ctx.pop();\r\n    }\r\n}\n\nclass BlockTag extends Tag {\r\n    constructor(token, remainTokens, liquid) {\r\n        super(token, remainTokens, liquid);\r\n        this.templates = [];\r\n        const match = /\\w+/.exec(token.args);\r\n        this.block = match ? match[0] : '';\r\n        while (remainTokens.length) {\r\n            const token = remainTokens.shift();\r\n            if (isTagToken(token) && token.name === 'endblock')\r\n                return;\r\n            const template = liquid.parser.parseToken(token, remainTokens);\r\n            this.templates.push(template);\r\n        }\r\n        throw new Error(`tag ${token.getText()} not closed`);\r\n    }\r\n    *render(ctx, emitter) {\r\n        const blockRender = this.getBlockRender(ctx);\r\n        if (ctx.getRegister('blockMode') === BlockMode.STORE) {\r\n            ctx.getRegister('blocks')[this.block] = blockRender;\r\n        }\r\n        else {\r\n            yield blockRender(new BlockDrop(), emitter);\r\n        }\r\n    }\r\n    getBlockRender(ctx) {\r\n        const { liquid, templates } = this;\r\n        const renderChild = ctx.getRegister('blocks')[this.block];\r\n        const renderCurrent = function* (superBlock, emitter) {\r\n            // add {{ block.super }} support when rendering\r\n            ctx.push({ block: superBlock });\r\n            yield liquid.renderer.renderTemplates(templates, ctx, emitter);\r\n            ctx.pop();\r\n        };\r\n        return renderChild\r\n            ? (superBlock, emitter) => renderChild(new BlockDrop(() => renderCurrent(superBlock, emitter)), emitter)\r\n            : renderCurrent;\r\n    }\r\n}\n\nclass RawTag extends Tag {\r\n    constructor(tagToken, remainTokens, liquid) {\r\n        super(tagToken, remainTokens, liquid);\r\n        this.tokens = [];\r\n        while (remainTokens.length) {\r\n            const token = remainTokens.shift();\r\n            if (isTagToken(token) && token.name === 'endraw')\r\n                return;\r\n            this.tokens.push(token);\r\n        }\r\n        throw new Error(`tag ${tagToken.getText()} not closed`);\r\n    }\r\n    render() {\r\n        return this.tokens.map((token) => token.getText()).join('');\r\n    }\r\n}\n\nclass TablerowloopDrop extends ForloopDrop {\r\n    constructor(length, cols, collection, variable) {\r\n        super(length, collection, variable);\r\n        this.length = length;\r\n        this.cols = cols;\r\n    }\r\n    row() {\r\n        return Math.floor(this.i / this.cols) + 1;\r\n    }\r\n    col0() {\r\n        return (this.i % this.cols);\r\n    }\r\n    col() {\r\n        return this.col0() + 1;\r\n    }\r\n    col_first() {\r\n        return this.col0() === 0;\r\n    }\r\n    col_last() {\r\n        return this.col() === this.cols;\r\n    }\r\n}\n\nclass TablerowTag extends Tag {\r\n    constructor(tagToken, remainTokens, liquid) {\r\n        super(tagToken, remainTokens, liquid);\r\n        const tokenizer = new Tokenizer(tagToken.args, this.liquid.options.operators);\r\n        const variable = tokenizer.readIdentifier();\r\n        tokenizer.skipBlank();\r\n        const predicate = tokenizer.readIdentifier();\r\n        const collectionToken = tokenizer.readValue();\r\n        if (predicate.content !== 'in' || !collectionToken) {\r\n            throw new Error(`illegal tag: ${tagToken.getText()}`);\r\n        }\r\n        this.variable = variable.content;\r\n        this.collection = collectionToken;\r\n        this.args = new Hash(tokenizer.remaining());\r\n        this.templates = [];\r\n        let p;\r\n        const stream = this.liquid.parser.parseStream(remainTokens)\r\n            .on('start', () => (p = this.templates))\r\n            .on('tag:endtablerow', () => stream.stop())\r\n            .on('template', (tpl) => p.push(tpl))\r\n            .on('end', () => {\r\n            throw new Error(`tag ${tagToken.getText()} not closed`);\r\n        });\r\n        stream.start();\r\n    }\r\n    *render(ctx, emitter) {\r\n        let collection = toEnumerable(yield evalToken(this.collection, ctx));\r\n        const args = (yield this.args.render(ctx));\r\n        const offset = args.offset || 0;\r\n        const limit = (args.limit === undefined) ? collection.length : args.limit;\r\n        collection = collection.slice(offset, offset + limit);\r\n        const cols = args.cols || collection.length;\r\n        const r = this.liquid.renderer;\r\n        const tablerowloop = new TablerowloopDrop(collection.length, cols, this.collection.getText(), this.variable);\r\n        const scope = { tablerowloop };\r\n        ctx.push(scope);\r\n        for (let idx = 0; idx < collection.length; idx++, tablerowloop.next()) {\r\n            scope[this.variable] = collection[idx];\r\n            if (tablerowloop.col0() === 0) {\r\n                if (tablerowloop.row() !== 1)\r\n                    emitter.write('</tr>');\r\n                emitter.write(`<tr class=\"row${tablerowloop.row()}\">`);\r\n            }\r\n            emitter.write(`<td class=\"col${tablerowloop.col()}\">`);\r\n            yield r.renderTemplates(this.templates, ctx, emitter);\r\n            emitter.write('</td>');\r\n        }\r\n        if (collection.length)\r\n            emitter.write('</tr>');\r\n        ctx.pop();\r\n    }\r\n}\n\nclass UnlessTag extends Tag {\r\n    constructor(tagToken, remainTokens, liquid) {\r\n        super(tagToken, remainTokens, liquid);\r\n        this.branches = [];\r\n        this.elseTemplates = [];\r\n        let p;\r\n        this.liquid.parser.parseStream(remainTokens)\r\n            .on('start', () => this.branches.push({\r\n            value: new Value(tagToken.args, this.liquid),\r\n            test: isFalsy,\r\n            templates: (p = [])\r\n        }))\r\n            .on('tag:elsif', (token) => this.branches.push({\r\n            value: new Value(token.args, this.liquid),\r\n            test: isTruthy,\r\n            templates: (p = [])\r\n        }))\r\n            .on('tag:else', () => (p = this.elseTemplates))\r\n            .on('tag:endunless', function () { this.stop(); })\r\n            .on('template', (tpl) => p.push(tpl))\r\n            .on('end', () => { throw new Error(`tag ${tagToken.getText()} not closed`); })\r\n            .start();\r\n    }\r\n    *render(ctx, emitter) {\r\n        const r = this.liquid.renderer;\r\n        for (const { value, test, templates } of this.branches) {\r\n            const v = yield value.value(ctx, ctx.opts.lenientIf);\r\n            if (test(v, ctx)) {\r\n                yield r.renderTemplates(templates, ctx, emitter);\r\n                return;\r\n            }\r\n        }\r\n        yield r.renderTemplates(this.elseTemplates, ctx, emitter);\r\n    }\r\n}\n\nclass BreakTag extends Tag {\r\n    render(ctx, emitter) {\r\n        emitter['break'] = true;\r\n    }\r\n}\n\nclass ContinueTag extends Tag {\r\n    render(ctx, emitter) {\r\n        emitter['continue'] = true;\r\n    }\r\n}\n\nclass EchoTag extends Tag {\r\n    constructor(token, remainTokens, liquid) {\r\n        super(token, remainTokens, liquid);\r\n        this.value = new Value(token.args, this.liquid);\r\n    }\r\n    *render(ctx, emitter) {\r\n        const val = yield this.value.value(ctx, false);\r\n        emitter.write(val);\r\n    }\r\n}\n\nclass LiquidTag extends Tag {\r\n    constructor(token, remainTokens, liquid) {\r\n        super(token, remainTokens, liquid);\r\n        const tokenizer = new Tokenizer(token.args, this.liquid.options.operators);\r\n        const tokens = tokenizer.readLiquidTagTokens(this.liquid.options);\r\n        this.templates = this.liquid.parser.parseTokens(tokens);\r\n    }\r\n    *render(ctx, emitter) {\r\n        yield this.liquid.renderer.renderTemplates(this.templates, ctx, emitter);\r\n    }\r\n}\n\nclass InlineCommentTag extends Tag {\r\n    constructor(tagToken, remainTokens, liquid) {\r\n        super(tagToken, remainTokens, liquid);\r\n        if (tagToken.args.search(/\\n\\s*[^#\\s]/g) !== -1) {\r\n            throw new Error('every line of an inline comment must start with a \\'#\\' character');\r\n        }\r\n    }\r\n    render() { }\r\n}\n\nconst tags = {\r\n    assign: AssignTag,\r\n    'for': ForTag,\r\n    capture: CaptureTag,\r\n    'case': CaseTag,\r\n    comment: CommentTag,\r\n    include: IncludeTag,\r\n    render: RenderTag,\r\n    decrement: DecrementTag,\r\n    increment: IncrementTag,\r\n    cycle: CycleTag,\r\n    'if': IfTag,\r\n    layout: LayoutTag,\r\n    block: BlockTag,\r\n    raw: RawTag,\r\n    tablerow: TablerowTag,\r\n    unless: UnlessTag,\r\n    'break': BreakTag,\r\n    'continue': ContinueTag,\r\n    echo: EchoTag,\r\n    liquid: LiquidTag,\r\n    '#': InlineCommentTag\r\n};\n\nclass Liquid {\r\n    constructor(opts = {}) {\r\n        this.renderer = new Render();\r\n        this.filters = {};\r\n        this.tags = {};\r\n        this.options = normalize(opts);\r\n        this.parser = new Parser(this);\r\n        forOwn(tags, (conf, name) => this.registerTag(name, conf));\r\n        forOwn(filters, (handler, name) => this.registerFilter(name, handler));\r\n    }\r\n    parse(html, filepath) {\r\n        return this.parser.parse(html, filepath);\r\n    }\r\n    _render(tpl, scope, renderOptions) {\r\n        const ctx = scope instanceof Context ? scope : new Context(scope, this.options, renderOptions);\r\n        return this.renderer.renderTemplates(tpl, ctx);\r\n    }\r\n    render(tpl, scope, renderOptions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return toPromise(this._render(tpl, scope, Object.assign(Object.assign({}, renderOptions), { sync: false })));\r\n        });\r\n    }\r\n    renderSync(tpl, scope, renderOptions) {\r\n        return toValueSync(this._render(tpl, scope, Object.assign(Object.assign({}, renderOptions), { sync: true })));\r\n    }\r\n    renderToNodeStream(tpl, scope, renderOptions = {}) {\r\n        const ctx = new Context(scope, this.options, renderOptions);\r\n        return this.renderer.renderTemplatesToNodeStream(tpl, ctx);\r\n    }\r\n    _parseAndRender(html, scope, renderOptions) {\r\n        const tpl = this.parse(html);\r\n        return this._render(tpl, scope, renderOptions);\r\n    }\r\n    parseAndRender(html, scope, renderOptions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return toPromise(this._parseAndRender(html, scope, Object.assign(Object.assign({}, renderOptions), { sync: false })));\r\n        });\r\n    }\r\n    parseAndRenderSync(html, scope, renderOptions) {\r\n        return toValueSync(this._parseAndRender(html, scope, Object.assign(Object.assign({}, renderOptions), { sync: true })));\r\n    }\r\n    _parsePartialFile(file, sync, currentFile) {\r\n        return this.parser.parseFile(file, sync, LookupType.Partials, currentFile);\r\n    }\r\n    _parseLayoutFile(file, sync, currentFile) {\r\n        return this.parser.parseFile(file, sync, LookupType.Layouts, currentFile);\r\n    }\r\n    _parseFile(file, sync, lookupType, currentFile) {\r\n        return this.parser.parseFile(file, sync, lookupType, currentFile);\r\n    }\r\n    parseFile(file, lookupType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return toPromise(this.parser.parseFile(file, false, lookupType));\r\n        });\r\n    }\r\n    parseFileSync(file, lookupType) {\r\n        return toValueSync(this.parser.parseFile(file, true, lookupType));\r\n    }\r\n    *_renderFile(file, ctx, renderFileOptions) {\r\n        const templates = (yield this._parseFile(file, renderFileOptions.sync, renderFileOptions.lookupType));\r\n        return yield this._render(templates, ctx, renderFileOptions);\r\n    }\r\n    renderFile(file, ctx, renderFileOptions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return toPromise(this._renderFile(file, ctx, Object.assign(Object.assign({}, renderFileOptions), { sync: false })));\r\n        });\r\n    }\r\n    renderFileSync(file, ctx, renderFileOptions) {\r\n        return toValueSync(this._renderFile(file, ctx, Object.assign(Object.assign({}, renderFileOptions), { sync: true })));\r\n    }\r\n    renderFileToNodeStream(file, scope, renderOptions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const templates = yield this.parseFile(file);\r\n            return this.renderToNodeStream(templates, scope, renderOptions);\r\n        });\r\n    }\r\n    _evalValue(str, scope) {\r\n        const value = new Value(str, this);\r\n        const ctx = scope instanceof Context ? scope : new Context(scope, this.options);\r\n        return value.value(ctx);\r\n    }\r\n    evalValue(str, scope) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return toPromise(this._evalValue(str, scope));\r\n        });\r\n    }\r\n    evalValueSync(str, scope) {\r\n        return toValueSync(this._evalValue(str, scope));\r\n    }\r\n    registerFilter(name, filter) {\r\n        this.filters[name] = filter;\r\n    }\r\n    registerTag(name, tag) {\r\n        this.tags[name] = isFunction(tag) ? tag : createTagClass(tag);\r\n    }\r\n    plugin(plugin) {\r\n        return plugin.call(this, Liquid);\r\n    }\r\n    express() {\r\n        const self = this; // eslint-disable-line\r\n        let firstCall = true;\r\n        return function (filePath, ctx, callback) {\r\n            if (firstCall) {\r\n                firstCall = false;\r\n                const dirs = normalizeDirectoryList(this.root);\r\n                self.options.root.unshift(...dirs);\r\n                self.options.layouts.unshift(...dirs);\r\n                self.options.partials.unshift(...dirs);\r\n            }\r\n            self.renderFile(filePath, ctx).then(html => callback(null, html), callback);\r\n        };\r\n    }\r\n}\n\n/* istanbul ignore file */\r\nconst version = '10.7.0';\n\n\n\n\n//# sourceURL=webpack://federalist-uswds-jekyll/./node_modules/liquidjs/dist/liquid.browser.esm.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module doesn't tell about it's top-level declarations so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./_assets/js/netlify/preview.js");
/******/ 	
/******/ })()
;